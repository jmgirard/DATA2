---
title: "Week 11 Assignment"
---

![](../../img/programming_357EDD.svg){.hero}

## Instructions

*Create a new Quarto document (HTML format), clear out the boilerplate code/text, and use this document to store your answers to each of the six questions below. Be sure to enable `embed-resources` using the header below. If your answer involves writing text, then use markdown to write 2--4 sentences per question; if you answer involves running code, then use one or more code chunks. For questions that ask you to fix code, correct any errors (while achieving the stated goal) and include only the working code in your document.*

```markdown
---
format: 
  html:
    embed-resources: true
---
```

*Please clearly mark which part of your document is answering which question (e.g., using markdown headings) and remove any "scratch work" or failed attempts from your document before submitting it. Finally, note that many essay-style questions will require you to read between the lines and use your imagination (as opposed to just looking up the answer in the lecture).*

```{r}
#| echo: false
#| message: false

library(tidyverse)
```


## Question 1

*For each question in this section, read what the user wanted to do, look at their code (which didn't work as intended), and fix it for them.*

a) I want each row to contain the number of cases and the population of a single country in a single year.

```{r, renv.ignore=TRUE}
#| eval: false
#| error: true

table2 |>  
  pivot_longer(
    names_from = type,
    values_from = count
  )
```

<p><details><summary>Hint</summary><blockquote>

`table2` is a real tibble included in `tidyverse`. This is what the output should look like:

```{r}
#| echo: false

table2 |>  
  pivot_wider(
    names_from = type,
    values_from = count
  )
```

</blockquote></details></p>

b) I want a tibble that contains all the sales and also includes the name of the customer who was involved in those sales (if available).

```{r, renv.ignore=TRUE}
#| eval: false
#| error: true

customers <- tibble(
  id = 1:4, 
  name = c("Bennie Factor", "Joe King", "Jack Pott", "Kay Oss")
)

sales <- tibble(
  date = c("01/10", "01/10", "01/15", "01/19", "01/22", "01/23"),
  customer = c(1, 3, 5, 3, 3, 1),
  amount = c(120.78, 224.31, 133.84, 201.22, 263.72, 199.84)
)

inner_join(
  x = sales, 
  y = customers, 
  by = "id"
)
```

<p><details><summary>Hint</summary><blockquote>
This is what the output should look like:

```{r}
#| echo: false

customers <- tibble(
  id = 1:4, 
  name = c("Bennie Factor", "Joe King", "Jack Pott", "Kay Oss")
)

sales <- tibble(
  date = c("01/10", "01/10", "01/15", "01/19", "01/22", "01/23"),
  customer = c(1, 3, 5, 3, 3, 1),
  amount = c(120.78, 224.31, 133.84, 201.22, 263.72, 199.84)
)

left_join(sales, customers, by = c("customer" = "id"))
```

</blockquote></details></p>

## Question 2

```{r}
#| include: false

set.seed(2020)
n <- 30
couples <- 
  tibble(
    couple = str_pad(1:n, width = 3, side = "left", pad = "0"),
    years_together = round(rnorm(n, 15, 5), 1),
    satisfaction = rnorm(n),
    satis1 = round(satisfaction + rnorm(n, -1, 0.5), 2),
    satis2 = round(satisfaction + rnorm(n, 1, 0.5), 2)
  ) |> 
  unite(col = "satisfaction", satis1, satis2, sep = "; ") |> 
  print()
write_rds(couples, "../../data/couples.rds")
```

Import the `couples.rds` file (available on Canvas) into R and examine its contents. Note that it is an RDS file not a CSV file, so you should use `read_rds()` to import it.

This file contains simulated/fake data from a study of 30 couples in which one member has a chronic illness. The `satisfaction` variable contains two numbers separated by a semi-colon. The first number is the life satisfaction rating of the "index" or member with a chronic illness, and the second number is the life satisfaction rating of the "partner" or member without a chronic illness.

a) Import the `couples.rds` data file and separate the `satisfaction` variable into two variables named `index` and `partner`.

b) Then use `mutate()` to convert these two new variables from strings to numbers and save the output to use in later questions.

<p><details><summary>Hint</summary><blockquote>
Your output should look like:

```{r}
#| echo: false
q2 <- 
  couples |>  
  separate_wider_delim(
    cols = satisfaction,
    delim = "; ",
    names = c("index", "partner")
  ) |> 
  mutate(across(c(index, partner), parse_number)) |> 
  print()
```

</blockquote></details></p>

## Question 3

a. Reshape the data from the previous question such that each row contains the data from a single individual (with variables for `couple`, `years_together`, `member`, and `satisfaction`). Save the output to use for the next question.

b. Create a new variable called `id` that uniquely identifies each individual participant in the tibble created in Q3a by uniting the `couple` number and the `member` type variables separated by an underscore (and using an argument to retain the two variables being united).

<p><details><summary>Hint</summary><blockquote>
Your output should look like:

```{r}
#| echo: false
q3 <- 
  q2 |> 
  pivot_longer(
    cols = c(index, partner), 
    names_to = "member", 
    values_to = "satisfaction"
  ) |> 
  unite(col = "id", couple, member, remove = FALSE) |> 
  print()
```

</blockquote></details></p>

## Question 4

Install and load the \{Lahman\} package, which contains data about baseball players. The questions in this section will use the `People` and `Salaries` data frames from this package. 

a) Convert both tables from data frames to tibbles using `as_tibble()` and assignment.

b) Create a new tibble called `Archers` that only includes players from the `People` tibble with the last name "Archer" and the following variables: `playerID`, `nameFirst`, `nameLast`, and `debut`.

<p><details><summary>Hint</summary><blockquote>
You may not need to use new Unit II functions for this part... Your output should look like:

```{r}
#| echo: false

library(Lahman)
Archers <- 
  People |> 
  as_tibble() |> 
  filter(nameLast == "Archer") |> 
  select(playerID, nameFirst, nameLast, debut) |> 
  print()
```

</blockquote></details></p>

## Question 5

a. Merge the `Archers` and `Salaries` tables in such a way that each player's salaries are shown but players without salary information are dropped.

<p><details><summary>Hint</summary><blockquote>
Your output should look like:

```{r}
#| echo: false
#| warning: false
#| message: false

Archers |> 
  inner_join(Salaries, by = "playerID")
```

</blockquote></details></p>

b. Would a full join be helpful in the scenario described in Q5a? Why or why not?


## Question 6

What is a relational database and when might a data scientist use one? How do the join functions help when working with a relational database?


---

âœ… Done! *Please save and then render your document to an HTML file. Check it over to make sure it is complete (and rendered properly) and then upload this file to Canvas by the deadline listed on the syllabus. Note that, if any of your code chunks has an error in it, the HTML file will not render properly (this is why removing scratch work is important).*

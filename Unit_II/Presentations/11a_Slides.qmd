---
format: 
  revealjs:
    css: ../../styles.css
    slide-number: true
    show-slide-number: all
    progress: true
    history: true
    hash-type: number
    theme: default
    code-block-background: true
    highlight-style: zenburn
    code-link: false
    code-copy: true
    pagetitle: "Foundations of Data Science"
    author-meta: "Jeffrey Girard"
    date-meta: "2023-03-27"
    semester: "Spring 2023"
    course: "399/800"
    lecture: "11a"
---

::: {.my-title}
# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}

::: {.my-grey}
[{{< meta semester >}} | Course {{< meta course >}}]{}<br />
[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}
:::

![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}
:::

## Roadmap: Reshaping Data

::: {.columns .pv4}

::: {.column width="60%"}
1. Separate and Unite
  
2. Pivot Longer

3. Pivot Wider

4. Activity
:::

::: {.column .tc .pv4 width="40%"}
{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::

:::

# Separate and Unite

## Separate and Unite {.smaller}

::: {.columns .pv4}

::: {.column width="60%"}
- Remember, we want to store one value per cell

- So we need to split up cells that violate this

- We do this using the `separate_*()` functions

- We can separate using delimiters or by position

:::{.fragment .mt1}
- We may sometimes want to do the opposite

- To merge many variables into one, we can use...

- The `unite()` function or `str_glue()`
:::
:::

::: {.column .tc .pv4 width="40%"}
{{< li gdjyhaga trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::

:::

## Separate and Unite Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

library(tidyverse)

# Create some example data
dat <- 
  tibble(
    id = c("Ax001x01", "Ax002x01", "Bx001x01", "Bx002x01", "Cx001x01", "Cx002x01"),
    duration = c("01:16", "01:21", "01:49", "00:34", "00:32", "00:54"),
    growth = c("1.6in", "2.6in", "4.1cm", "2.3cm", "3.1in", "2.8in"),
    symptoms = c("pain", "pain,irritability", NA, NA, "irritability", "irritability,diarrhea,nausea")
  ) |> 
  print()

# SEPARATE

# Separate a column into multiple columns
dat |> 
  separate_wider_delim(
    cols = duration,
    delim = ":",
    names = c("min", "sec")
  )

# Keep the column being separated using remove = FALSE
dat |> 
  separate_wider_delim(
    cols = duration,
    delim = ":",
    names = c("min", "sec"),
    cols_remove = FALSE
  )

# The created variables will be strings but we can use parse_number()
dat |> 
  separate_wider_delim(
    cols = duration,
    delim = ":",
    names = c("min", "sec"),
    cols_remove = FALSE
  ) |> 
  mutate(across(.cols = c(min, sec), .fns = parse_number))

# This also works with more than two "into" columns
dat |> 
  separate_wider_delim(
    cols = id,
    delim = "x",
    names = c("group", "subject", "time")
  )

# Separate by position rather than by delimiter
dat |> 
  separate_wider_position(
    cols = growth,
    widths = c(growth_value = 3, growth_units = 2)
  )

# We can specify what to do with too few (or too many) pieces
dat |> 
  separate_wider_delim(
    cols = symptoms,
    delim = ",",
    names = c("symptom1", "symptom2", "symptom3"),
    too_few = "align_start"
  )

dat |> 
  separate_wider_delim(
    cols = symptoms,
    delim = ",",
    names = c("symptom1", "symptom2", "symptom3"),
    too_few = "align_end"
  )

# Or, in this case, we can instead separate longer (into rows)
dat |> 
  separate_longer_delim(
    cols = symptoms,
    delim = ","
  )

# UNITE

mpg2 <- 
  mpg |> 
  select(manufacturer, model, year, hwy, cty) |>
  print()

# Unite multiple columns into one string
mpg2 |> 
  unite(
    col = "full_name",
    manufacturer, model, year,
    sep = " "
  ) 

mpg2 |> 
  unite(
    col = "fuel_eff",
    cty, hwy,
    sep = " / "
  ) 

# Or use mutate() and str_glue() to get a bit more control
# You can "glue" in a string by wrapping its name in {}
mpg2 |> 
  mutate(
    full_name = str_glue("{manufacturer} {model} ({year})"),
    full_name = str_to_title(full_name),
    fuel_eff = str_glue("mpg: {cty} city / {hwy} highway")
  )
```


# Pivot Longer

## Pivot Longer {.smaller}

::: {.columns .pv4}

::: {.column width="60%"}
- Tidy data can have many different shapes
  -   [Long data]{.b .blue} is useful for MLM and most plots
  -   Wide data is useful for SEM and other plots
  
::: {.fragment .mt1}
- The `pivot_*()` functions reshape tibbles
  -   `pivot_longer()` adds rows from columns
:::
::: {.fragment .mt1}
- For `pivot_longer()`, we need...
  -   `cols` to collapse
  -   `names_to` is where cols names go
  -   `values_to` is where cols values go
:::
:::

::: {.column .tc .pv4 width="40%"}
{{< li xacejjis trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::

:::

## Pivot Longer Live Coding

```{r, renv.ignore = TRUE}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# Create example data in wide format
gradebook <- 
  tibble(
    student = 1:10,
    test1 = round(rnorm(10, 81, 10)),
    test2 = round(rnorm(10, 75, 8)),
    test3 = round(rnorm(10, 77, 7)),
    test4 = round(rnorm(10, 80, 5)),
    test5 = round(rnorm(10, 79, 9))
  ) |> 
  print()

# This format usually won't work for multilevel modeling or ggplot2
# ggplot(gradebook, aes(x = ???, y = ???))

# To fix it, we can reshape it (pivot it) to long format
gradebook2 <- 
  gradebook |> 
  pivot_longer(
    cols = c(test1, test2, test3, test4, test5), 
    names_to = "test", 
    values_to = "grade"
  ) |> 
  print()

# Now this is much easier to work with
ggplot(gradebook2, aes(x = test, y = grade, group = student)) + 
  geom_line() + 
  geom_point()

# Use selection helpers to select columns
gradebook |> 
  pivot_longer(
    cols = starts_with("test"), 
    names_to = "test", 
    values_to = "grade"
  ) |> 
  print()

# Automatically remove the name prefix and (optionally) convert to numeric
gradebook |> 
  pivot_longer(
    cols = starts_with("test"), 
    names_to = "test", 
    values_to = "grade",
    names_prefix = "test",
    names_transform = parse_number
  ) |> 
  print()

# How to select columns with numerical names: wrap them in `backticks`
table4a

table4a |> 
  pivot_longer(
    cols = c(1999, 2000),
    names_to = "year",
    values_to = "cases"
  ) # error

table4a |> 
  pivot_longer(
    cols = c(`1999`, `2000`),
    names_to = "year",
    values_to = "cases"
  )
```


# Pivot Wider

## Pivot Wider {.smaller}

::: {.columns .pv4}

::: {.column width="60%"}
- Tidy data can have many different shapes
  -   Long data is useful for MLM and most plots
  -   [Wide data]{.b .blue} is useful for SEM and other plots
  
::: {.fragment .mt1}
- The `pivot_*()` functions reshape tibbles
  -   `pivot_wider()` adds columns from rows
:::
::: {.fragment .mt1}
- For `pivot_wider()`, we need...
  -   `names_from` is where names come from
  -   `values_from` is where values come from
:::
:::

::: {.column .tc .pv4 width="40%"}
{{< li xacejjis trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::

:::

## Pivot Wider Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# Example data in long format
diary_data <- 
  tibble(
    participant = rep(1:3, each = 10, times = 2),
    day = rep(1:10, each = 2, times = 3),
    scale = rep(c("mood", "sleep"), times = 10*3),
    score = round(rnorm(n = 60), digits = 1)
  ) |>  
  print()

# This format works well for some purposes
ggplot(diary_data, aes(x = scale, y = score)) + geom_boxplot()

# But not others!
# ggplot(diary_data, aes(x = mood???, y = sleep???))

# To fix this, we can reshape (pivot) it to wide format
diary_data |>
  pivot_wider(
    names_from = "scale",
    values_from = "score"
  )

# Now we can plot this relationship as desired
diary_data |> 
  pivot_wider(
    names_from = "scale",
    values_from = "score"
  ) |> 
  ggplot(aes(x = mood, y = sleep)) + geom_point()

# We can also add a prefix to each name
diary_data

diary_data |> 
  pivot_wider(
    names_from = "day",
    values_from = "score"
  )

diary_data |> 
  pivot_wider(
    names_from = "day",
    values_from = "score",
    names_prefix = "day_"
  )

# We can also pivot on multiple columns
diary_data |> 
  pivot_wider(
    names_from = c("day", "scale"),
    values_from = "score"
  )

# We can change the way the new names are formed (e.g., with prefix and sep)
diary_data |> 
  pivot_wider(
    names_from = c("day", "scale"),
    values_from = "score",
    names_prefix = "day",
    names_sep = "."
  )

# Example data
records <- 
  tibble(
    fname = rep(c("John", "Alice", "Buster", "John", "Zenia"), each = 2),
    var = rep(c("grad_year", "cum_gpa"), times = 5),
    val = c(1990, 3.01, 1993, 3.32, 1997, 2.09, 1994, 3.28, 1991, 2.64)
  ) |> 
  print()

# If the pivoting results in rows that aren't unique, it will nest them
records |> 
  pivot_wider(
    names_from = "var",
    values_from = "val"
  )

# Get around this by making your rows unique!
records |> 
  mutate(linitial = rep(c("A", "S", "K", "Z", "I"), each = 2)) |> 
  pivot_wider(
    names_from = var,
    values_from = val
  )
```

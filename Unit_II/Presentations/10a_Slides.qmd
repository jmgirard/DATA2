---
format: 
  revealjs:
    css: ../../styles.css
    slide-number: true
    show-slide-number: all
    progress: true
    history: true
    hash-type: number
    theme: default
    code-block-background: true
    highlight-style: zenburn
    code-link: false
    code-copy: true
    pagetitle: "Foundations of Data Science"
    author-meta: "Jeffrey Girard"
    date-meta: "2023-03-20"
    semester: "Spring 2023"
    course: "399/800"
    lecture: "10a"
---

::: {.my-title}
# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}

::: {.my-grey}
[{{< meta semester >}} | Course {{< meta course >}}]{}<br />
[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}
:::

![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}
:::

## Roadmap

::: {.columns .pv4}

::: {.column width="60%"}
1. Summarize
  
2. Grouped Summarize

3. Grouped Mutate

4. Activity
:::

::: {.column .tc .pv4 width="40%"}
{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::

:::

# Summarize

## Summarize {.smaller}

::: {.columns .pv4}

::: {.column width="60%"}
-   Although we store data about many observations...
-   ...we often want to [summarize across]{.b .blue} observations
    -   This is like [folding]{.b .green} the tibble down to [one row]{.b .green}

::: {.fragment .mt1}
-   We've seen functions that summarize vectors
    -   `length()`, `sum()`, `min()`, `max()`
    -   `mean()`, `median()`, `sd()`, `var()`
:::

::: {.fragment .mt1}
-   `summarize()` lets us use them on tibbles
    -   It works very similarly to `mutate()`
    -   It always creates a tibble as output
:::
:::

::: {.column .tc .pv4 width="40%"}
{{< li uhmqrsgl trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::

:::

## Summarize Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: We will need tidyverse and an example dataset

library(tidyverse)

sales <- 
  tibble(
    customer = c(1, 2, 3, 1, 3),
    store = c("A", "A", "A", "B", "B"),
    items = c(25, 20, 16, 10, 5),
    spent = c(685, 590, 392, 185, 123)
  ) |> 
  print()

# ==============================================================================

# USECASE: Summarize the typical sales

my_summary <- 
  sales |> 
  summarize(
    avg_items = mean(items),
    avg_spent = mean(spent)
  ) |> 
  print()

# ==============================================================================

# PITFALL: Don't use summary() instead of summarize()

my_summary <- 
  sales |> 
  summary(
    avg_items = mean(items),
    avg_spent = mean(spent)
  ) |> 
  print() # not a tibble

# ==============================================================================

# USECASE: Use more than one summary function

my_summary <- 
  sales |> 
  summarize(
    total_items = sum(items),
    total_spent = sum(spent),
    avg_items = mean(items),
    avg_spent = mean(spent)
  ) |> 
  print()

# ==============================================================================

# USECASE: Use counting functions

my_counts <- 
  sales |> 
  summarize(
    n_sales = n(),
    n_customers = n_distinct(customer),
    n_stores = n_distinct(store)
  ) |> 
  print()
```

# Grouped Summarize

## Grouped Summarize {.smaller}

::: {.columns .pv4}

::: {.column width="60%"}
-   We can also summarize a tibble [by group]{.b .blue}
    -   This is like [folding]{.b .green} the tibble multiple times
    -   Specifically, we fold down to [one row per group]{.b .green}

::: {.fragment .mt1}
-   We just add the `.by` argument to `summarize()`
    -   We can group by one or many variables
    -   With many, we group by their combinations
:::
:::

::: {.column .tc .pv4 width="40%"}
{{< li pmwtbpap trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::

:::

## Grouped Summarize Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: We will need tidyverse and an example dataset

library(tidyverse)

sales <- 
  tibble(
    customer = c(1, 2, 3, 1, 3),
    store = c("A", "A", "A", "B", "B"),
    items = c(25, 20, 16, 10, 5),
    spent = c(685, 590, 392, 185, 123)
  ) |> 
  print()

# ==============================================================================

# USECASE: Summarize per store

sales |> 
  summarize(
    customers = n_distinct(customer),
    items_sold = sum(items),
    total_sales = sum(spent),
    avg_items = mean(items),
    avg_spent = mean(spent),
    .by = store
  )

# ==============================================================================

# USECASE: Summarize per customer

sales |> 
  summarize(
    n_visits = n(),
    items_bought = sum(items),
    total_spent = sum(spent),
    stores_visited = n_distinct(store),
    .by = customer
  )

# ==============================================================================

# USECASE: Summarize per customer-store combination

sales |> 
  summarize(
    n_visits = n(),
    items_bought = sum(items),
    total_spent = sum(spent),
    .by = c(customer, store)
  )

# ==============================================================================

# SETUP: Let's get a larger, more realistic dataset

# Extra pane > Packages tab > Install > nycflights13

library("nycflights13")

flights

# ==============================================================================

# USECASE: Find the carrier with the lowest average delays

flights |> 
  summarize(
    m_delay = mean(dep_delay, na.rm = TRUE),
    .by = carrier
  ) |> 
  arrange(m_delay)

# ==============================================================================

# LESSON: We can also group by multiple variables

# USECASE: Let's find the day of the year with the most flights

flights |> 
  summarize(
    n_flights = n(),
    .by = c(month, day)
  ) |> 
  arrange(desc(n_flights))

# ==============================================================================

# Note how this is different from summarizing by day only (365 vs. 31)

flights |> 
  summarize(
    n_flights = n(),
    .by = day
  ) |> 
  arrange(desc(n_flights))
```

# Grouped Mutate

## Grouped Mutate {.smaller}

::: {.columns .pv4}

::: {.column width="60%"}
-   We can also [mutate]{.b .blue} a tibble by group
    -   Adds the summary values in a new column
    -   They will be recycled for groups with many rows
    
::: {.fragment .mt1}
-   We now have four useful tools for different jobs
    -   Ungrouped summarize: fold to one row overall
    -   Grouped summarize: fold to one row per group
    -   Ungrouped mutate: add summaries overall
    -   Grouped mutate: add summaries per group
:::
:::

::: {.column .tc .pv4 width="40%"}
{{< li qygayvwp trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::

:::

## Grouped Mutate Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

sales

# Calculates the total sum (across both stores)
sales |> 
  summarize(
    items_sum_total = sum(items)
  )

# Calculates the store sums
sales |> 
  summarize(
    items_sum_store = sum(items),
    .by = store
  )

# Appends and recycles the total sum (across both stores)
sales |> 
  mutate(
    items_sum_total = sum(items),
    items_pct_total = items / items_sum_total
  )

# Appends and recycles the store sums
sales |> 
  mutate(
    items_sum_store = sum(items),
    items_pct_store = items / items_sum_store,
    .by = store
  )

# What if you want both? You can!

sales |> 
  mutate(
    items_sum_total = sum(items),
    items_pct_total = items / items_sum_total
  ) |> 
  mutate(
    items_sum_store = sum(items),
    items_pct_store = items / items_sum_store,
    .by = store
  )

flights 

# .by can also be used with mutate()
flights |> 
  select(year:dep_time, carrier, dep_delay) |> 
  mutate(
    mean_dep_delay = mean(dep_delay, na.rm = TRUE),
    .by = carrier
  )

# Compare this to summarize version
flights |> 
  select(year:dep_time, carrier, dep_delay) |> 
  summarize(
    mean_dep_delay = mean(dep_delay, na.rm = TRUE),
    .by = carrier
  )

# Example longitudinal data
dat <- 
  tibble(
    person = rep(101:103, each = 4),
    sex = rep(c("M", "F", "M"), each = 4),
    age = rep(c(13, 10, 12), each = 4), 
    visit = rep(1:4, times = 3),
    score = round(rnorm(12), digits = 1)
  ) |> 
  print()

# Another grouped mutate vs grouped summarize example
dat |> 
  mutate(
    n_visits = n(), 
    .by = person
  )

dat |> 
  summarize(
    n_visits = n(),
    .by = person
  )

# Add row numbers with row_number()
dat2 <- 
  dat |> 
  select(-visit) |> 
  print()

dat2 |> 
  mutate(
    visit_total = row_number()
  )

dat2 |> 
  mutate(
    visit_person = row_number(),
    .by = person
  )
```

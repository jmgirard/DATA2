---
format: 
  revealjs:
    css: ../../styles.css
    slide-number: true
    show-slide-number: all
    progress: true
    history: true
    hash-type: number
    theme: default
    code-block-background: true
    highlight-style: zenburn
    code-link: false
    code-copy: true
    controls: true
    pagetitle: "Foundations of Data Science"
    author-meta: "Jeffrey Girard"
    date-meta: "2023-04-10"
    semester: "Spring 2023"
    course: "399/800"
    lecture: "13a"
---

::: {.my-title}
# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}

::: {.my-grey}
[{{< meta semester >}} | Course {{< meta course >}}]{}<br />
[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}
:::

![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}
:::

## Roadmap: Special Data Types

::: {.columns .pv4}

::: {.column width="60%"}
1. Strings
  
2. Factors

3. Dates and Times

4. Activity
:::

::: {.column .tc .pv4 width="40%"}
{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::

:::

# Strings

## Strings {.smaller}

::: {.columns .pv4}

::: {.column width="60%"}
-   Strings contain text data
    -   Include quotation marks with `\"` 
    -   Add newlines with `\n` and tabs with `\t`
    -   Print string as-is with `writeLines()`
    
::: {.fragment .mt1}
-   \{stringr\} (in tidyverse) provides string tools
    -   Combine, collapse, re-capitalize, etc.
    -   Subset, remove, replace, etc.
    -   *Advanced:* detect, extract, count, etc.
    -   *Advanced:* regular expressions (regex)
    
:::

:::

::: {.column .tc .pv4 width="40%"}
{{< li xqnbvely trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::

:::

## Strings Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# Special characters in strings
string1 <- "This is a string"
string2 <- 'To include a "quote" in a string I use single quotes'
double_quote <- "I could also use \"quote\" to escape the inner quotes"
double_quote
writeLines(double_quote)
" \ " #the backslash disappears!

literal_backslash <- "To include a backslash I escape it as \\"
literal_backslash
writeLines(literal_backslash)

string3 <- "I can include tabs \t like so and new lines \n like so"
string3
writeLines(string3)

# Combining strings
library(tidyverse)
str_c("x", "y")
str_c("x", "y", "z")
str_c("x", "y", "z", sep = ", ")

x <- c("Ann", "Bob", "Charlie")
str_c(x) #doesn't combine when given a vector
str_c(x, sep = " & ") #sep doesn't work for a vector
str_c(x, collapse = " & ") #collapse works for a vector

str_c("prefix_", c("a", "b", "c"), "_suffix")
str_c("x", 1:10)

# Re-capitalizing strings
x <- c("PSYC 800: Foundations of Data Science")
str_to_lower(x)
str_to_upper(x)
str_to_sentence(x)
str_to_title(x)

# Subsetting strings
x <- c("Apple", "Banana", "Pear")
str_sub(x, start = 1, end = 3)
str_sub(x, start = -3, end = -1)
str_sub(x, start = 2, end = -2)
str_sub(x, start = 1, end = 5) # can go beyond the end

# Removing whitespace from strings
x <- "\t  Sometimes strings have\n   too   much white space "
writeLines(x)
str_trim(x) # remove white space at the start and end
str_squish(x) # trim and then collapse inner white space

# Removing and replacing patterns from strings
x <- "Scientists very often utilize very fancy words, even when they could utilize simpler ones."
str_remove(x, pattern = "very ")
str_remove_all(x, pattern = "very ")
str_replace(x, pattern = "utilize", replacement = "use")
str_replace_all(x, pattern = "utilize", replacement = "use")
x_clean <- 
  x |> 
  str_remove_all("very ") |> 
  str_replace_all("utilize", "use")|> 
  print()
```


# Factors

## Factors {.smaller}

::: {.columns .pv4}

::: {.column width="60%"}
-   [Factors]{.b .blue} store categorical data
    -   *Levels* are what's in the data
    -   *Labels* are names with assign

::: {.fragment .mt1}
-   There are two main factor types
    -   *Unordered*, e.g., math, science, or literature
    -   *Ordered*, e.g., mild, medium, or hot
:::

::: {.fragment .mt1}
-   \{forcats\} (in tidyverse) provides factor tools
    -   Reverse, reorder, recode, etc.
    -   Collapse, lump, drop, etc.
:::

:::

::: {.column .tc .pv4 width="40%"}
{{< li cdbgwqyw trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::

:::

## Factors Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

first_name <- c("Adam", "Becky", "Chris", "Dina")
classroom <- c(2, 1, 1, 2)
first_name
classroom

factor(classroom)
factor(classroom, levels = c(1, 2), labels = c("Blue", "Green"))
factor(classroom, levels = c(2, 1), labels = c("Green", "Blue"))
factor(classroom, levels = c(1, 2, 3), labels = c("Blue", "Green", "Red"))
factor(classroom, levels = c(1, 2), labels = c("Blue", "Green", "Red")) #error

classroom2 <- c("Green", "Blue", "Blue", "Green")
classroom2
factor(classroom2)

factor(classroom2, levels = c("Blue", "Green", "Red"))
favsalsa <- c(3, 1, 2, 1)
factor(favsalsa, levels = 1:3, labels = c("Mild", "Medium", "Hot"))
factor(favsalsa, levels = 1:3, labels = c("Mild", "Medium", "Hot"), ordered = TRUE)

# Reversing the order of a factor's levels
df <- tibble(
  name = c("Apple", "Banana", "Pear"),
  price = c(1.32, 0.62, 1.52)
)

ggplot(df, aes(x = price, y = name)) + geom_col()
ggplot(df, aes(x = price, y = fct_rev(name))) + geom_col()

# Reordering factor levels by another variable's values
ggplot(df, aes(x = price, y = fct_reorder(name, price))) + geom_col()

gss_cat # comes from forcats package (in tidyverse)
summary(gss_cat$relig)

relig_summary <- 
  gss_cat |> 
  summarize(
    n = n(),
    age = mean(age, na.rm = TRUE),
    tvhours = mean(tvhours, na.rm = TRUE),
    .by = relig
  ) |> 
  print()

ggplot(relig_summary, aes(x = tvhours, y = relig)) + geom_col()
relig_summary |> 
  mutate(relig = fct_reorder(relig, tvhours)) |> 
  ggplot(aes(x = tvhours, y = relig)) + geom_col()

# Recoding factor level names
levels(gss_cat$partyid)
recoded_party <- 
  gss_cat |> 
  mutate(
    partyid = fct_recode(
      partyid,
      "Republican, strong" = "Strong republican",
      "Republican, weak" = "Not str republican",
      "Independent, near rep" = "Ind,near rep",
      "Independent, near dem" = "Ind,near dem",
      "Democrat, weak" = "Not str democrat",
      "Democrat, strong" = "Strong democrat"
    )
  )
levels(recoded_party$partyid)

# Collapsing factor levels
levels(gss_cat$partyid)
collapsed_party <- 
  gss_cat |> 
  mutate(
    partyid = fct_collapse(
      partyid,
      other = c("No answer", "Don't know", "Other party"),
      rep = c("Strong republican", "Not str republican"),
      ind = c("Ind,near rep", "Independent", "Ind,near dem"),
      dem = c("Not str democrat", "Strong democrat")
    )
  )
levels(collapsed_party$partyid)
```


# Dates and Times

## Dates and Times {.smaller}

::: {.columns .pv4}

::: {.column width="60%"}
-   Different levels of detail are possible
    -   e.g., Tuesday vs. April 11 vs. 2023-04-11
    -   e.g., 1pm vs. 1:05pm vs. 13:04:59 US/Central
    -   e.g., 2023-04-11 13:04:59 US/Central
    -   Work with the simplest level that meets your needs
    
::: {.fragment .mt1}
-   \{lubridate\} and \{hms\} provide nice tools
    -   Parse dates and times from strings
    -   Extract parts of dates and times
    -   Create durations, periods, and intervals
:::
:::

::: {.column .tc .pv4 width="40%"}
{{< li gphxrzct trigger=loop delay=3000 colors=primary:#2a76dd class=rc >}}
:::

:::

## Dates and Times Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

library(lubridate)

# Generate current date and date-time
today()
now()

# Parse dates from strings and numbers
ymd("2017-01-31")
mdy("January 31st, 2017")
dmy("31-Jan-2017")
ymd(20170131)

# Parse date-times from strings
ymd_hms("2017-01-31 20:11:59")
ymd_hms("2017-01-31 20:11:59", tz = "US/Central")
mdy_hm("01/31/2017 08:01")

# Build date-times from components
library(nycflights13)
flights |> 
  select(year, month, day, hour, minute)
flights_dt <- 
  flights |> 
  select(year, month, day, hour, minute) |> 
  mutate(
    date = make_date(year, month, day),
    datetime = make_datetime(year, month, day, hour, minute)
  ) |>  
  print()

# Extracting components from date-times
datetime <- ymd_hms("2016-07-08 12:34:56")
year(datetime)
month(datetime)
mday(datetime)
yday(datetime)
wday(datetime)
month(datetime, label = TRUE)
month(datetime, label = TRUE, abbr = FALSE)
wday(datetime, label = TRUE, abbr = FALSE)

flights_dt |> 
  mutate(weekday = wday(date, label = TRUE)) |> 
  ggplot(aes(x = weekday)) + geom_bar()

# Intervals represent the time span between two dates/datetimes
# Intervals account for time zones, leap years, etc.
interval(start = ymd(19870530), end = today())
interval(start = ymd(19870530), end = today()) / days(1)
interval(start = ymd(19870530), end = today()) / months(1)
interval(start = ymd(19870530), end = today()) / years(1)
interval(
  start = ymd_hms("2016-07-08 12:34:56", tz = "US/Central"),
  end = ymd_hms("2016-07-09 12:34:56", tz = "US/Eastern"),
  tz = "UTC"
)

library(hms)
parse_hm("12:34")
parse_hms("12:34:59")
x <- parse_hms("12:34:59.786")
x

hour(x)
minute(x)
second(x)

round_hms(x, digits = 1)
round_hms(x, digits = 0)

parse_hms("12:56:34") - parse_hms("12:34:56")
difftime(parse_hms("12:56:34"), parse_hms("12:34:56"))
difftime(parse_hms("12:56:34"), parse_hms("12:34:56"), units = "secs")
```

{
  "hash": "1d086501093cab1a6bd87981c1a0d175",
  "result": {
    "markdown": "---\ntitle: \"Lecture [04b] Activity\"\n---\n\n\n![](../../img/programmer_2780E3.svg){.hero}\n\n## Question 1\n\nLoad in the `economics` tibble (included in \\{tidyverse\\}). Then create a pipeline to accomplish the following steps, saving the output to a new tibble called `unemp` and printing it:\n\na) Calculate a new variable called `rate` by dividing `unemploy` (the number of unemployed, in thousands) by `pop` (the total population, in thousands).\n\nb) Then drop (i.e., unselect) the `pce`, `uempmed`, and `psavert` variables from the tibble.\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\nFinal Pipeline:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nunemp <- \n  economics |> \n  mutate(rate = unemploy / pop) |> \n  select(-pce, -uempmed, -psavert) |> \n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 574 Ã— 4\n   date          pop unemploy   rate\n   <date>      <dbl>    <dbl>  <dbl>\n 1 1967-07-01 198712     2944 0.0148\n 2 1967-08-01 198911     2945 0.0148\n 3 1967-09-01 199113     2958 0.0149\n 4 1967-10-01 199311     3143 0.0158\n 5 1967-11-01 199498     3066 0.0154\n 6 1967-12-01 199657     3018 0.0151\n 7 1968-01-01 199808     2878 0.0144\n 8 1968-02-01 199920     3001 0.0150\n 9 1968-03-01 200056     2877 0.0144\n10 1968-04-01 200208     2709 0.0135\n# â„¹ 564 more rows\n```\n:::\n:::\n\n\n</blockquote></details></p>\n\n\n## Question 2\n\nDownload the \"kaggle_cereal.csv\" data file from Canvas. Copy it to your Project folder and read it into R as a tibble. Then create a pipeline to produce a short list of cereals for me to try. I am only interested in cold cereals with a rating greater than 70. Please arrange the list so that the cereals with the fewest calories are displayed at the top. Save the result as a tibble called `jeffs_list` (I expect it to be even more popular than Craig's list ðŸ™ƒ) and print it.\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n\n::: {.cell}\n\n```{.r .cell-code}\njeffs_list <- \n  read_csv(\"../../data/kaggle_cereal.csv\")  |> \n  filter(type == \"cold\" & rating > 70) |> \n  arrange(calories) |> \n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 Ã— 8\n  name                      mfr      type  calories sodium carbo sugars rating  \n  <chr>                     <chr>    <chr>    <dbl>  <dbl> <dbl>  <dbl> <chr>   \n1 All-Bran with Extra Fiber Kelloggs cold        50    140     8      0 93.7049â€¦\n2 Shredded Wheat 'n'Bran    Nabisco  cold        90      0    19      0 74.4729â€¦\n3 Shredded Wheat spoon size Nabisco  cold        90      0    20      0 missing \n4 Mueslix Crispy Blend      Kelloggs cold       160    150    17     13 missing \n```\n:::\n:::\n\n\n</blockquote></details></p>\n\n\n## Question 3\n\nTwo other useful column verbs are `rename()` and `relocate()`. You can use `rename(tbl, new_name = old_name)` to rename a variable in a tibble. You can use `relocate(tbl, var_to_move, .before = other_var)` to move a variable before another variable or `relocate(tbl, var_to_move, .after = other_var)` to move a variable after another variable. These verbs won't be on the assignment, but are useful to play around with.\n\na) Try to rename the `uempmed` variable in the `economics` tibble to `duration`.\n\nb) Try to move the `unemploy` variable in the `economics` tibble to come after the `date` variable.\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n**Part (a)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nrename(economics, duration = uempmed)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 574 Ã— 6\n   date         pce    pop psavert duration unemploy\n   <date>     <dbl>  <dbl>   <dbl>    <dbl>    <dbl>\n 1 1967-07-01  507. 198712    12.6      4.5     2944\n 2 1967-08-01  510. 198911    12.6      4.7     2945\n 3 1967-09-01  516. 199113    11.9      4.6     2958\n 4 1967-10-01  512. 199311    12.9      4.9     3143\n 5 1967-11-01  517. 199498    12.8      4.7     3066\n 6 1967-12-01  525. 199657    11.8      4.8     3018\n 7 1968-01-01  531. 199808    11.7      5.1     2878\n 8 1968-02-01  534. 199920    12.3      4.5     3001\n 9 1968-03-01  544. 200056    11.7      4.1     2877\n10 1968-04-01  544  200208    12.3      4.6     2709\n# â„¹ 564 more rows\n```\n:::\n:::\n\n\n**Part (b)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelocate(economics, unemploy, .after = date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 574 Ã— 6\n   date       unemploy   pce    pop psavert uempmed\n   <date>        <dbl> <dbl>  <dbl>   <dbl>   <dbl>\n 1 1967-07-01     2944  507. 198712    12.6     4.5\n 2 1967-08-01     2945  510. 198911    12.6     4.7\n 3 1967-09-01     2958  516. 199113    11.9     4.6\n 4 1967-10-01     3143  512. 199311    12.9     4.9\n 5 1967-11-01     3066  517. 199498    12.8     4.7\n 6 1967-12-01     3018  525. 199657    11.8     4.8\n 7 1968-01-01     2878  531. 199808    11.7     5.1\n 8 1968-02-01     3001  534. 199920    12.3     4.5\n 9 1968-03-01     2877  544. 200056    11.7     4.1\n10 1968-04-01     2709  544  200208    12.3     4.6\n# â„¹ 564 more rows\n```\n:::\n:::\n\n\n</blockquote></details></p>\n\n---\n\n*Note that there is no need to turn in Activities. These are just for practice!*\n",
    "supporting": [
      "04b_Activity_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "4e50965762752546e01ca0b470e02d71",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Foundations of Data Science\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-01-30\"\n    semester: \"Spring 2023\"\n    course: \"399/800\"\n    lecture: \"03a\"\n---\n\n\n::: {.my-title}\n# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}\n\n::: {.my-grey}\n[{{< meta semester >}} | Course {{< meta course >}}]{}<br />\n[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}\n:::\n\n![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n## Roadmap: Basic Programming\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n1. Assignment\n  \n2. Naming\n\n3. Functions\n\n4. Activity\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n# Assignment\n\n## Assignment {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   It is often useful to store data in [named objects]{.b .green}\n    -   This makes the data easier to use and re-use\n    -   This makes the code easier to write and read\n\n::: {.fragment .mt1}\n-   Which command is easier to follow?\n    1.  Dial *7 8 5 8 6 4 0 8 4 1*\n    2.  Call *Office Phone*\n:::\n\n::: {.fragment .mt1}\n-   Named objects are created using [assignment]{.b .blue}\n    -   Give a **name** then an **arrow** then the **data**\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li mgtgkkcb trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`office <- 7858640841`\n:::\n:::\n:::\n\n## Assignment Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# LESSON: Assigning and printing\n\nx <- 2\nx\n\n# ==============================================================================\n\n# USECASE: Using an object in math (a la algebra) \n\nx * 4\n\n2 * 4\n\n# ==============================================================================\n\n# LESSON: You must use assignment to update an object\n\nx\n\nx + 1\n\nx # still 2\n\nx <- x + 1\nx # updated to 3\n\n# ==============================================================================\n\n# USECASE: We can use the same object multiple times in a line\n\n(10 + x - 1) / x\n\n# ==============================================================================\n\n# USECASE: We can also use an object to create another object\n\ny <- 10 + x\ny\n\n# ==============================================================================\n\n# USECASE: We can also use multiple objects in a line\n\ny / x\n```\n:::\n\n\n# Naming\n\n## Naming {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   Object names can [only include]{.b .blue}:\n    -   Letters: `a-Z`\n    -   Numbers: `0-9`\n    -   Underscores: `_`\n    -   Periods: `.`\n\n::: {.fragment .mt1}\n-   Additional Rules:\n    -   Must [start with a letter or period]{.b .blue}\n    -   Cannot contain spaces or dashes\n    -   Cannot contain other symbols\n    -   Names are case-sensitive (`age` â‰  `Age`)\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li efdggetp trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n## Naming Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# LESSON: Good names are a balancing act\n\nx <- 93 # what is it?\n\nrate <- 93 # too short\n\nheart_rate_in_beats_per_minute <- 93 # too long\n\nheart_rate_bpm <- 93 # just right\n\n# ==============================================================================\n\n# PITFALL: Don't try to include spaces or dashes in names\n\nheart rate <- 93 # error\n\nheart-rate <- 93 # error\n\n# ==============================================================================\n\n# PITFALL: Don't try to include special symbols\n\nage@time2 <- 12 # error\n\nage_time2 <- 12 # correct\n\n# ==============================================================================\n\n# PITFALL: Don't try to put a number or underscore first\n\nheart_rate_1 <- 93 # correct\n\n1_heart_rate <- 93 # error\n\n_heart_rate <- 93 # error\n\n# ==============================================================================\n\n# LESSON: Object names are case-sensitive\n\nheart_rate <- 93\n\nHeart_rate <- 88\n\nheart_rate # still 93\n\nHeart_rate # a new object\n```\n:::\n\n\n# Functions\n\n## Functions {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Recipes]{.b .green} allow chefs to cook up tasty treats\n    -   Recipes call for ingredients\n    -   Recipes involve one or more steps\n    -   Steps transform ingredients into treats\n\n::: {.fragment .mt1}\n-   [Functions]{.b .blue} are like *customizable* recipes\n    -   Functions call for inputs (\"arguments\")\n    -   Functions involve one or more lines of code\n    -   Code transforms inputs into outputs\n    -   Using functions requires parentheses (usually)\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li vpqdjfdy trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`out <- f(in1, in2)`\n:::\n:::\n:::\n\n## Functions Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Function can perform a task more easily and readably\n\n# TEMPLATE: output <- function_name(input)\n\n9 ^ (1 / 2)\n\nx <- sqrt(9)\nx\n\n# ==============================================================================\n\n# LESSON: We can also use functions to transform objects\n\ny <- 9\n\nsqrt(y)\n\n# ==============================================================================\n\n# LESSON: We can even use functions to transform the result of calculations\n\n2 / 3\n\nround(2 / 3)\n\n# ==============================================================================\n\n# LESSON: We can customize what a function does using arguments\n\n# TEMPLATE: output <- function_name(argument, argument_name = argument_value)\n\nround(2 / 3, digits = 2)\n\nround(2 / 3, digits = 3)\n\n# ==============================================================================\n\n# LESSON: Some arguments are optional because they have default values\n\nround(2 / 3) # the default value for digits is 0\n\nround(2 / 3, digits = 0)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
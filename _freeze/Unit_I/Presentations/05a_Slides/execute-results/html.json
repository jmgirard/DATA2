{
  "hash": "f421d9d72db7aa1b0fd7482e339d49f8",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: github\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Foundations of Data Science\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-02-13\"\n    semester: \"Spring 2023\"\n    course: \"399/800\"\n    lecture: \"05a\"\n---\n\n\n::: {.my-title}\n# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}\n\n::: {.my-grey}\n[{{< meta semester >}} | Course {{< meta course >}}]{}<br />\n[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}\n:::\n\n![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n## Roadmap: ggplot2 Basics\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n1. Principles\n  \n2. Scatterplots\n\n3. Aesthetics\n\n4. Activity\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n# Principles\n\n## What is a graphic? {.smaller}\n\n::: {.pv4 .tc}\n![](../../img/graphics.jpg)\n\n::: {.fragment}\nA [data visualization]{.b .blue} expresses [data]{.b .green} through [visual aesthetics]{.b .green}.\n:::\n:::\n\n\n## Describing Graphics {.smaller}\n\n::: {.pv4 .tc}\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](05a_Slides_files/figure-revealjs/graphics1-1.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](05a_Slides_files/figure-revealjs/graphics1-2.png){width=960}\n:::\n:::\n\n\n::: {.fragment}\nSome simple graphics are [easy to describe]{.b .green} and may even have [ready names]{.b .blue}.\n:::\n:::\n\n\n## Describing Graphics {.smaller}\n\n::: {.pv4 .tc}\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](05a_Slides_files/figure-revealjs/graphics2-1.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](05a_Slides_files/figure-revealjs/graphics2-2.png){width=960}\n:::\n:::\n\n\n::: {.fragment}\nA [grammar of graphics]{.b .blue} will help us describe more [complex]{.b .green} graphics.\n:::\n:::\n\n\n## The Grammar of Graphics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   The [grammar of graphics]{.b .blue} is a set of rules for [describing]{.b .green} and [creating]{.b .green} data visualizations\n\n::: {.fragment .mt1}\n-   To make our data visual (and therefore put our highly evolved occipital lobes to work)...\n    -   We connect [variables]{.b .blue} to [visual qualities]{.b .green}\n    -   We represent [observations]{.b .blue} as [visual objects]{.b .green}\n:::\n\n::: {.fragment .mt1}\n-   This requires four *fundamental* elements\n    -   We will first learn about them in lecture\n    -   We will then apply them in R using \\{ggplot2\\}\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li ksoxpinm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n## Data {.smaller}\n\n::: {.tc .tibbledisp}\n\n\n::: {.cell rows.print='6'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n```\n:::\n:::\n\n\n::: {.fragment .mt1}\nGraphics require [data]{.b .blue} (e.g., tibbles), which describe [observations]{.b .green} using [variables]{.b .green}.\n:::\n:::\n\n\n## Aesthetic Mappings {.smaller}\n\n::: {.pv4 .tc}\n\n![](../../img/aes.png)\n\n::: {.fragment}\nGraphics require [aesthetic mappings]{.b .blue}, which connect [data variables]{.b .green} to [visual qualities]{.b .green}.\n:::\n:::\n\n\n## Scales {.smaller}\n\n::: {.pv4 .tc}\n\n::: {layout-ncol=2}\n![](../../img/position.png)\n\n![](../../img/otherscale.png)\n:::\n\n::: {.fragment .mt1}\nGraphics require [scales]{.b .blue}, which connect specific [data *values*]{.b .green} to specific [aesthetic *values*]{.b .green}.\n:::\n:::\n\n\n## Geometric Objects {.smaller}\n\n::: {.pv4 .tc}\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](05a_Slides_files/figure-revealjs/geoms-1.png){width=960}\n:::\n\n::: {.cell-output-display}\n![](05a_Slides_files/figure-revealjs/geoms-2.png){width=960}\n:::\n:::\n\n\n::: {.fragment .mt1}\nGraphics require [geometric objects]{.b .blue} (geoms), which [represent the observations]{.b .green}.\n:::\n:::\n\n\n# Scatterplots\n\n## ggplot2 Basics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   The [ggplot2]{.b .blue} package is a part of tidyverse\n    -   No need to install or load it separately\n    -   It plays nicely with tibbles and wrangling\n\n::: {.fragment .mt1}\n-   It implements the [grammar of graphics]{.b .green} in R\n    -   The \"gg\" stands for \"grammar of graphics\"\n    -   Thus, it lets us control all four elements\n:::\n\n::: {.fragment .mt1}\n-   We will create a [pseudo-pipeline]{.b .green} of commands\n    -   However, we will use `+` rather than `|>`\n    -   This is because \\{ggplot2\\} predates the R pipe\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li gkeohday trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n## ggplot2 Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# LESSON: First, set the data to a tibble\np <- ggplot(data = mpg)\np\n\n# ==============================================================================\n\n# LESSON: Next, set the aesthetic mappings with aes()\n\np <- ggplot(data = mpg, mapping = aes(x = displ, y = hwy))\np\n\n# ==============================================================================\n\n# TIP: You can leave off the optional argument names\n\np <- ggplot(mpg, aes(x = displ, y = hwy))\np\n\n# ==============================================================================\n\n# LESSON: Finally, add a point geom\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point()\np\n\n# ==============================================================================\n\n# LESSON: We can use arguments to customize the geom\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"grey40\", shape = \"square\", size = 2)\np\n\n# ==============================================================================\n\n# LESSON: We now have a simple scatterplot but can add more geom layers\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"grey40\", shape = \"square\", size = 2) +\n  geom_smooth()\np\n\n# ==============================================================================\n\n# LESSON: We now have a simple scatterplot but can add more geom layers\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"grey40\", shape = \"square\", size = 2) +\n  geom_smooth(color = \"red\", linetype = \"dashed\", linewidth = 1)\np\n```\n:::\n\n\n\n# Aesthetics\n\n## Aesthetics {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Aesthetics]{.b .blue} control a geom's appearance\n    -   points: *color, shape, size, ...*\n    -   smooths: *color, linetype, linewidth, ...*\n\n::: {.fragment .mt1}\n-   There are two ways to control aesthetics:\n    -   You can [set it]{.b .blue} to a [value]{.b .green}\n        -   It will take on *one* value only\n        -   e.g., all points = red\n    -   You can [map it]{.b .blue} to a [variable]{.b .green}\n        -   It will take on *different* values\n        -   e.g., sedans = red, trucks = blue\n\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li fiivuxdi trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n## Aesthetics Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# LESSON: Set the color aesthetic to a value\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"blue\")\np\n\n# ==============================================================================\n\n# LESSON: Map the color aesthetic to a variable to learn more relationships\n\np <- \n  ggplot(mpg, aes(x = displ, y = hwy, color = class)) + \n  geom_point()\np\n\n# ==============================================================================\n\n# PITFALL: Be sure to set aesthetics inside of geom() not aes()\n\np <- ggplot(mpg, aes(x = displ, y = hwy, color = \"blue\")) + \n  geom_point() #unintended\np\n\n# ==============================================================================\n\n# PITFALL: If you both set and map an aesthetic, the setting will win out\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) + \n  geom_point(color = \"blue\") \n\n# ==============================================================================\n\n# LESSON: This works the same for other aesthetics\n\nggplot(mpg, aes(x = displ, y = hwy, shape = drv)) + \n  geom_point() \n\n# ==============================================================================\n\n# TIP: I like to use redundant aesthetics (e.g., in case color can't be seen)\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv, shape = drv)) + \n  geom_point() \n\n# ==============================================================================\n\n# LESSON: Some geoms will be \"grouped\" if you map to a categorical variable\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv, shape = drv)) + \n  geom_point() +\n  geom_smooth()\n\n# NOTE: We now have a separate smooth line for each drv category\n# NOTE: The shape aesthetic does not apply to smooth geoms so was ignored there\n```\n:::\n",
    "supporting": [
      "05a_Slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "5851d5c5ee46c735787494f23b06f4a6",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: github\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Foundations of Data Science\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-02-15\"\n    semester: \"Spring 2023\"\n    course: \"399/800\"\n    lecture: \"05b\"\n---\n\n\n::: {.my-title}\n# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}\n\n::: {.my-grey}\n[{{< meta semester >}} | Course {{< meta course >}}]{}<br />\n[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}\n:::\n\n![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n## Roadmap\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n1. Variation\n  \n2. Covariation\n\n3. Layering\n\n4. Activity\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n\n# Variation\n\n## Variation {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Variable distributions]{.b .blue} are critical in data analysis\n    -   What are the most and least [common values]{.b .green}?\n    -   What are the [extrema]{.b .green} (min and max values)?\n    -   Are there any [outliers]{.b .green} or impossible values?\n    -   How much [spread]{.b .green} is there in the variable?\n    -   What [shape]{.b .green} does the distribution take?\n\n::: {.fragment .mt1}\n-   Visualization helps us to understand [variation]{.b .blue}\n    -   It can also [communicate]{.b .green} it to others\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li wovwohsm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n## Variation Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nsalaries <- read_csv(\"salaries.csv\")\n\n# ==============================================================================\n\n# USECASE: Create bar plots to count discrete variable frequency\n\nggplot(salaries, aes(x = sex)) + geom_bar()\n\nggplot(salaries, aes(x = rank)) + geom_bar()\n\nggplot(salaries, aes(x = discipline)) + geom_bar()\n\nggplot(salaries, aes(y = discipline)) + geom_bar()\n\n# ==============================================================================\n\n# PITFALL: Don't try to create a bar plot for a continuous variable\n\nggplot(salaries, aes(x = salary)) + geom_bar() # not what we wanted\n\n# ==============================================================================\n\n# USECASE: Instead create histograms to count continuous variable bin frequency\n\nggplot(salaries, aes(x = salary)) + geom_histogram() # better\n\nggplot(salaries, aes(x = salary)) + \n  geom_histogram(bins = 20)\n\nggplot(salaries, aes(x = salary)) + \n  geom_histogram(binwidth = 2)\n\nggplot(salaries, aes(x = salary)) + \n  geom_histogram(binwidth = 2, color = \"red\", linewidth = 1)\n\nggplot(salaries, aes(x = salary)) + \n  geom_histogram(binwidth = 2, color = \"red\", linewidth = 1, fill = \"white\")\n# ==============================================================================\n\n# PITFALL: Don't try to create histograms for categorical variables\n\nggplot(salaries, aes(x = rank)) + geom_histogram() #error\n\n# ==============================================================================\n\n# USECASE: Or create density plots or boxplots\n\nggplot(salaries, aes(x = salary)) + geom_density()\n# Higher density means relatively more common\n\nggplot(salaries, aes(x = salary)) + \n  geom_density(color = \"red\", linewidth = 1, fill = \"white\")\n\nggplot(salaries, aes(x = salary)) + geom_boxplot()\n# The box goes from 25th to 75th percentile\n# The thick line inside the box is the 50th percentile (median)\n# The whisker lines outside the box show non-outlier points\n# The dots outside the whisker lines show outlier points\n```\n:::\n\n\n\n# Covariation\n\n## Covariation {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   We are often interested in [covariation]{.b .blue}\n    -   Does variation in X go with variation in Y?\n    -   Do higher X scores go with higher Y scores?\n    -   Do groups differ on Y score distributions?\n    -   Do certain groups tend to go together?\n\n::: {.fragment .mt1}\n-   We can extend variation geoms into covariation\n    -   The geoms we use will heavily depend on...\n    -   ...are the variables [continuous]{.b .green} or [discrete]{.b .green}?\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li fjeqvghr trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n## Covariation Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nsalaries <- read_csv(\"salaries.csv\")\n\n# Continuous-by-continuous = Scatterplot\nggplot(salaries, aes(x = yrs.since.phd, y = salary)) + geom_point()\n\n\n# Continuous-by-discrete = Boxplots\nggplot(salaries, aes(x = rank, y = salary)) + geom_point() # not great\n\nggplot(salaries, aes(x = rank, y = salary)) + geom_boxplot() # better\n\nggplot(salaries, aes(x = salary, y = rank)) + geom_boxplot() # better\n\n\n# Continuous-by-discrete = Violin\n\nggplot(salaries, aes(x = salary, y = rank)) + geom_violin() # better\n\nggplot(salaries, aes(x = salary, y = rank)) + \n  geom_violin(draw_quantiles = c(0.25, 0.50, 0.75))\n\nggplot(salaries, aes(x = salary, y = rank)) + \n  geom_violin(draw_quantiles = c(0.05, 0.95))\n\n\n# Continuous-by-discrete = Density\n\nggplot(salaries, aes(x = salary, y = rank)) + \n  geom_density(linewidth = 1) # error\n\nggplot(salaries, aes(x = salary, color = rank)) + \n  geom_density(linewidth = 1) # correct\n\n\n# Discrete-by-discrete = Jitter\n\nggplot(salaries, aes(x = rank, y = sex)) +\n  geom_point() # not great - all the points are on top on one another\n\nggplot(salaries, aes(x = rank, y = sex)) + \n  geom_jitter() # okay - the points are now randomly pushed a small amount\n\nggplot(salaries, aes(x = rank, y = sex)) + \n  geom_jitter(width = 0.25, height = 0.25) # we can control how much to push\n\n## We will learn better options (using summarizing and positioning) in Unit II\n```\n:::\n\n\n\n# Layering\n\n## Layering {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   ggplot2 uses a [layered]{.b .blue} grammar of graphics\n    -   We can keep [stacking geoms]{.b .green} on top\n\n::: {.fragment .mt1}\n-   Layering adds a lot of possibilities\n    -   We can convey [more complex]{.b .green} ideas\n    -   We can learn more about our data\n:::\n\n::: {.fragment .mt1}\n-   But we can still describe these graphics\n    -   Just [describe each layer]{.b .green} in turn\n    -   And describe the layers' ordering\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li ikwcijxm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n## Layering Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nmpg\n\n# ==============================================================================\n\n# USECASE: Add a smooth geom (i.e., line of best fit)\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth()\n\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n# ==============================================================================\n\n# USECASE: Add a line geom (i.e., connecting points)\n\neconomics\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_point()\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_point() +\n  geom_line(color = \"orange\", size = 1) #line geom second = line on top\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_line(color = \"orange\", size = 1) + #line geom first = line on bottom\n  geom_point()\n\n# ==============================================================================\n\n# USECASE: Add reference line geoms\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_hline(yintercept = 0, color = \"orange\", size = 1) +\n  geom_line(color = \"blue\", size = 1) +\n  geom_point()\n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_vline(xintercept = 7.5, color = \"orange\", size = 1) +\n  geom_line(color = \"blue\", size = 1) +\n  geom_point() \n\nggplot(economics, aes(x = date, y = unemploy)) + \n  geom_abline(intercept = 4000, slope = 0.5, color = \"orange\", size = 1) +\n  geom_line(color = \"blue\", size = 1) +\n  geom_point() \n\n# ==============================================================================\n\n# USECASE: Combine different types of geoms\n\nggplot(mpg, aes(x = hwy, y = class)) + \n  geom_violin(draw_quantiles = 0.5) + \n  geom_jitter(color = \"firebrick\", height = 0.25, width = 0.25)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
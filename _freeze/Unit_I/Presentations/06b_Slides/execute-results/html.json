{
  "hash": "0ad84e431c583337f6ac10e15749290c",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    pagetitle: \"Foundations of Data Science\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-02-22\"\n    semester: \"Spring 2023\"\n    course: \"399/800\"\n    lecture: \"06b\"\n---\n\n\n::: {.my-title}\n# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}\n\n::: {.my-grey}\n[{{< meta semester >}} | Course {{< meta course >}}]{}<br />\n[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}\n:::\n\n![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n## Roadmap\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n1. Scales\n  \n2. Labels\n\n3. Themes\n\n4. Activity\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n\n# Scales\n\n## Scales {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n- Scales are one of the basic gg elements\n\n::: {.mt1}\n- So far, we have let R guess on the scales\n  - Type (e.g., continuous or discrete)\n  - Limits (minimum and maximum values)\n  - Breaks (values to emphasize)\n:::\n\n::: {.fragment .mt1}\n- But we can completely [customize the scales]{.b .blue}!\n  - Changes may [enhance communication]{.b .green}\n  - We will add on various `scale_` functions\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li kjeivigm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n\n## Scales Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Creating a base plot (map drv to color for all geoms)\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_jitter(size = 2) + \n  geom_smooth()\n\n# Creating a base plot (map drv to color for jitter geom only)\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_jitter(size = 2, aes(color = drv)) + \n  geom_smooth(color = \"black\")\n\n# Configuring the limits and breaks of the continuous y axis\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_jitter(size = 2, aes(color = drv)) + \n  geom_smooth(color = \"black\") +\n  scale_y_continuous(\n    limits = c(5, 50),\n    breaks = c(10, 20, 30, 40),\n    expand = c(0, 0)\n  )\n\n# Configuring the limits and breaks of the continuous x axis\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_jitter(size = 2, aes(color = drv)) + \n  geom_smooth(color = \"black\") +\n  scale_y_continuous(\n    limits = c(5, 50), \n    breaks = c(10, 20, 30, 40),\n    expand = c(0, 0)\n  ) +\n  scale_x_continuous(\n    limits = c(1, 7.5),\n    breaks = c(2, 3, 4, 5, 6, 7),\n    expand = c(0, 0)\n  )\n\n# Configuring the breaks and labels of the discrete color scale\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_jitter(size = 2, aes(color = drv)) + \n  geom_smooth(color = \"black\") +\n  scale_y_continuous(\n    limits = c(5, 50), \n    breaks = c(10, 20, 30, 40),\n    expand = c(0, 0)\n  ) +\n  scale_x_continuous(\n    limits = c(1, 7.5),\n    breaks = c(2, 3, 4, 5, 6, 7),\n    expand = c(0, 0)\n  ) +\n  scale_color_discrete(\n    breaks = c(\"r\", \"f\", \"4\"), # change ordering\n    labels = c(\n      \"4\" = \"Four-Wheel\",\n      \"f\" = \"Front-Wheel\",\n      \"r\" = \"Rear-Wheel\"\n    )\n  )\n\n# Manually specifying the color values\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_jitter(aes(color = drv)) + \n  geom_smooth(color = \"black\") +\n  scale_y_continuous(\n    limits = c(5, 50), \n    breaks = c(10, 20, 30, 40),\n    expand = c(0, 0)\n  ) +\n  scale_x_continuous(\n    limits = c(1, 7.5),\n    breaks = c(2, 3, 4, 5, 6, 7),\n    expand = c(0, 0)\n  ) +\n  scale_color_manual(\n    breaks = c(\"r\", \"f\", \"4\"),\n    labels = c(\n      \"4\" = \"Four-Wheel\",\n      \"f\" = \"Front-Wheel\",\n      \"r\" = \"Rear-Wheel\"\n    ),\n    values = c(\n      \"4\" = \"salmon\",\n      \"f\" = \"cornflowerblue\",\n      \"r\" = \"seagreen3\"\n    )\n  )\n\n# Add a redundant shape mapping\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_jitter(size = 2, aes(color = drv, shape = drv)) + \n  geom_smooth(color = \"black\") +\n  scale_y_continuous(\n    limits = c(5, 50), \n    breaks = c(10, 20, 30, 40),\n    expand = c(0, 0)\n  ) +\n  scale_x_continuous(\n    limits = c(1, 7.5),\n    breaks = c(2, 3, 4, 5, 6, 7),\n    expand = c(0, 0)\n  ) +\n  scale_color_manual(\n    breaks = c(\"r\", \"f\", \"4\"),\n    labels = c(\n      \"4\" = \"Four-Wheel\",\n      \"f\" = \"Front-Wheel\",\n      \"r\" = \"Rear-Wheel\"\n    ),\n    values = c(\n      \"4\" = \"salmon\",\n      \"f\" = \"cornflowerblue\",\n      \"r\" = \"seagreen3\"\n    )\n  ) +\n  scale_shape_discrete(\n    breaks = c(\"r\", \"f\", \"4\"),\n    labels = c(\n      \"4\" = \"Four-Wheel\",\n      \"f\" = \"Front-Wheel\",\n      \"r\" = \"Rear-Wheel\"\n    )\n  )\n```\n:::\n\n\n\n# Labels\n\n## Labels {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n- By default, scales are named after data variables\n\n::: {.mt1}\n- Changing names may [enhance communication]{.b .blue}\n  - Provide accessible names/definitions\n  - Include units and other methods info.\n  - Appear prettier and more professional\n:::\n\n::: {.fragment .mt1}\n- We can also add [plot-level information]{.b .blue}\n  - Titles and subtitles for take-aways\n  - Captions for asides or data sources\n:::\n\n::: {.fragment .mt1}\n- This is all done by adding on `labs()`\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li aravllcl trigger=loop delay=5000 colors=primary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Labels Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Save plot from last section as an object (not necessary, but saves space)\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) +\n    geom_jitter(size = 2, aes(color = drv, shape = drv)) + \n    geom_smooth(color = \"black\") +\n    scale_y_continuous(\n      limits = c(5, 50), \n      breaks = c(10, 20, 30, 40),\n      expand = c(0, 0)\n    ) +\n    scale_x_continuous(\n      limits = c(1, 7.5),\n      breaks = c(2, 3, 4, 5, 6, 7),\n      expand = c(0, 0)\n    ) +\n    scale_color_manual(\n      breaks = c(\"r\", \"f\", \"4\"),\n      labels = c(\n        \"4\" = \"Four-Wheel\",\n        \"f\" = \"Front-Wheel\",\n        \"r\" = \"Rear-Wheel\"\n      ),\n      values = c(\n        \"4\" = \"salmon\",\n        \"f\" = \"cornflowerblue\",\n        \"r\" = \"seagreen3\"\n      )\n    ) +\n    scale_shape_discrete(\n      breaks = c(\"r\", \"f\", \"4\"),\n      labels = c(\n        \"4\" = \"Four-Wheel\",\n        \"f\" = \"Front-Wheel\",\n        \"r\" = \"Rear-Wheel\"\n      )\n    )\np\n\n# Adjusting the positional (x and y) axis titles\np +\n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\"\n  )\n\n# Adjusting the color and shape legend titles\np +\n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\",\n    color = \"Drivetrain\",\n    shape = \"Drivetrain\"\n  )\n\n\n# Adding a title\np +\n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\",\n    color = \"Drivetrain\",\n    shape = \"Drivetrain\",\n    title = \"Fuel efficiency generally decreases with engine size\"\n  )\n\n# Adding a subtitle\np + \n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\",\n    color = \"Drivetrain\",\n    shape = \"Drivetrain\",\n    title = \"Fuel efficiency generally decreases with engine size\",\n    subtitle = \"Rear-wheel drive vehicles are often an exception due to sports cars' light weight\"\n  )\n\n# Adding a caption\np +\n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\",\n    color = \"Drivetrain\",\n    shape = \"Drivetrain\",\n    title = \"Fuel efficiency generally decreases with engine size\",\n    subtitle = \"Rear-wheel drive vehicles are often an exception due to sports cars' light weight\",\n    caption = \"Data from fueleconomy.gov\"\n  )\n```\n:::\n\n\n\n# Themes\n\n## Themes {.smaller}\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n- Themes let you control [non-data elements]{.b .blue}\n  - Font size and color\n  - Ticks and gridlines\n  - Legend position\n\n::: {.fragment .mt1}\n- Complete themes change many elements\n  - `theme_*()`\n:::\n\n::: {.fragment .mt1}\n- Individual elements can also be changed\n  - `theme(...)`\n  - `element_*()`\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li hbkyydsg trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n\n## Themes Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Save plot from last section as an object (not necessary, but saves space)\np <- \n  ggplot(mpg, aes(x = displ, y = hwy)) +\n    geom_jitter(size = 2, aes(color = drv, shape = drv)) + \n    geom_smooth(color = \"black\") +\n    scale_y_continuous(\n      limits = c(5, 50), \n      breaks = c(10, 20, 30, 40),\n      expand = c(0, 0)\n    ) +\n    scale_x_continuous(\n      limits = c(1, 7.5),\n      breaks = c(2, 3, 4, 5, 6, 7),\n      expand = c(0, 0)\n    ) +\n    scale_color_manual(\n      breaks = c(\"r\", \"f\", \"4\"),\n      labels = c(\n        \"4\" = \"Four-Wheel\",\n        \"f\" = \"Front-Wheel\",\n        \"r\" = \"Rear-Wheel\"\n      ),\n      values = c(\n        \"4\" = \"salmon\",\n        \"f\" = \"cornflowerblue\",\n        \"r\" = \"seagreen3\"\n      )\n    ) +\n    scale_shape_discrete(\n      breaks = c(\"r\", \"f\", \"4\"),\n      labels = c(\n        \"4\" = \"Four-Wheel\",\n        \"f\" = \"Front-Wheel\",\n        \"r\" = \"Rear-Wheel\"\n      )\n    ) +\n  labs(\n    x = \"Engine displacement (L)\",\n    y = \"Highway fuel economy (mpg)\",\n    color = \"Drivetrain\",\n    shape = \"Drivetrain\",\n    title = \"Fuel efficiency generally decreases with engine size\",\n    subtitle = \"Rear-wheel drive vehicles are often an exception due to sports cars' light weight\",\n    caption = \"Data from fueleconomy.gov\"\n  )\np\n\n# Add complete themes to change many elements at once\np + theme_classic()\n\np + theme_bw()\n\np + theme_minimal()\n\np + theme_dark()\n\n# Modify the \"base size\" for labels in the plot\n\np + theme_minimal(base_size = 20) # too big\np + theme_minimal(base_size = 5) # too small\np + theme_minimal(base_size = 12) # just right\n\n# Customize specific elements one-by-one\n\n## Customize the legend position\np + theme(legend.position = \"bottom\")\np + theme(legend.position = \"none\")\np + theme(legend.position = c(0.9, 0.8))\n\n## Customize text elements\np + \n  theme(\n    legend.position = c(0.9, 0.8),\n    axis.title = element_text(color = \"grey50\"),\n    legend.title = element_text(color = \"grey50\"),\n    plot.title = element_text(face = \"bold\")\n  )\n\n## Customize line elements\np + \n  theme(\n    legend.position = c(0.9, 0.8),\n    axis.title = element_text(color = \"grey50\"),\n    legend.title = element_text(color = \"grey50\"),\n    plot.title = element_text(face = \"bold\"),\n    panel.grid.major = element_line(linewidth = 2/3, linetype = \"dashed\"),\n    axis.ticks = element_line(linewidth = 2/3)\n  )\n\n## Removing (or \"blanking\") elements\np + \n  theme(\n    legend.position = c(0.9, 0.8),\n    axis.title = element_text(color = \"grey50\"),\n    legend.title = element_text(color = \"grey50\"),\n    plot.title = element_text(face = \"bold\"),\n    panel.grid.major = element_line(linewidth = 2/3, linetype = \"dashed\"),\n    axis.ticks = element_line(linewidth = 2/3),\n    panel.grid.minor = element_blank()\n  )\n\n## Customizing rectangle elements\np + \n  theme(\n    legend.position = c(0.9, 0.8),\n    axis.title = element_text(color = \"grey50\"),\n    legend.title = element_text(color = \"grey50\"),\n    plot.title = element_text(face = \"bold\"),\n    panel.grid.major = element_line(linewidth = 2/3, linetype = \"dashed\"),\n    axis.ticks = element_line(linewidth = 2/3),\n    panel.grid.minor = element_blank(),\n    panel.background = element_rect(fill = \"antiquewhite\")\n  )\n\n# Applying the same theme to many plots\n\nmytheme <- \n  theme(\n    legend.position = c(0.9, 0.8),\n    axis.title = element_text(color = \"grey50\"),\n    legend.title = element_text(color = \"grey50\"),\n    plot.title = element_text(face = \"bold\"),\n    panel.grid.major = element_line(linewidth = 2/3, linetype = \"dashed\"),\n    axis.ticks = element_line(linewidth = 2/3),\n    panel.grid.minor = element_blank(),\n    panel.background = element_rect(fill = \"antiquewhite\")\n  )\n\np + mytheme\n```\n:::\n",
    "supporting": [
      "06b_Slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
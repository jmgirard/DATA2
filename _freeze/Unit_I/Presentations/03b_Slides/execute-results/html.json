{
  "hash": "15d66a725f1b7b3fbea3ee6368ccca8f",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    pagetitle: \"Foundations of Data Science\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-02-01\"\n    semester: \"Spring 2023\"\n    course: \"399/800\"\n    lecture: \"03b\"\n---\n\n\n::: {.my-title}\n# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}\n\n::: {.my-grey}\n[{{< meta semester >}} | Course {{< meta course >}}]{}<br />\n[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}\n:::\n\n![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n## Roadmap: More Programming\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n1. Vectors\n  \n2. Strings\n\n3. Packages\n\n4. Activity\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n# Vectors\n\n## Vectors {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Vectors]{.b .blue} combine similar objects into a collection\n    -   *I like to imagine a train pulling multiple cars*<br />\n    ![](../../img/traincar.png)\n    -   A vector is one object with many sub-objects\n    -   We refer to each sub-object as an [element]{.b .green}\n\n::: {.fragment .mt1}\n-   Some functions [transform each element]{.b .green} in turn\n    -   *Double the amount of cargo in every train car*\n:::\n\n::: {.fragment .mt1}\n-   Some functions [summarize across elements]{.b .green}\n    -   *Calculate the total cargo across all train cars*\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li bqmoqptv trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`v <- c(1, 2, 3)`\n:::\n\n:::\n:::\n\n\n## Vectors Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# LESSON: We can combine multiple elements into a vector\n\n# TEMPLATE: vector_name <- c(element1, element2, element3)\n\nx <- 4 9 16 25 # error\n\nx <- c(4, 9, 16, 25)\nx\n\ny <- c(2, 3)\ny\n\n# ==============================================================================\n\n# LESSON: We can also combine multiple vectors and elements\n\nc(x, y)\n\nc(x, y, 20)\n\n# ==============================================================================\n\n# USECASE: Math operators will transform each element individually\n\nx + 1\n\nx * 3\n\nx # but again, this won't be saved unless you use assignment\n\n# ==============================================================================\n\n# USECASE: Some functions will also transform each element individually\n\nsqrt(x)\n\nlog(x)\n\n# ==============================================================================\n\n# USECASE: Other functions will summarize the vector with a single number\n\nlength(x)\n\nsum(x)\n\nmean(x)\n\naverage(x) # error\n```\n:::\n\n\n# Strings\n\n## Strings {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   When talking to R, we need a way to distinguish\n    -   Object/function names (e.g., the *mean* function)\n    -   Text/character data (e.g., the word *mean*)\n    \n::: {.fragment .mt1}\n-   [Strings]{.b .blue} are R's way of storing text data\n    -   Strings can store any characters (no rules!)\n    -   Strings are created and displayed with [quotes]{.b .green}\n:::\n::: {.fragment .mt1}\n-   R has great tools for working with strings\n    -   Strings can be collected into vectors\n    -   Special functions can transform strings\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li xqnbvely trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`name <- \"John Doe\"`\n:::\n\n:::\n:::\n\n## Strings Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Strings are the main way to store character data in R\n \nmy_color <- red # error\n\nmy_color <- \"red\" # correct\n\n# ==============================================================================\n\n# USECASE: Strings can also store symbols not allowed in object names\n\ndye <- \"red#40\"\ndye\n\ndyes <- c(\"red#40\", \"blue#02\")\ndyes\n\n# ==============================================================================\n\n# PITFALL: Many operations you can do to numbers won't work for strings\n\ndyes + 1 # error\n\nmean(dyes) # error\n\n# ==============================================================================\n\n# USECASE: But other operations work for both or even just for strings\n\nlength(dyes)\n\nnchar(dyes)\n\ndyes2 <- toupper(dyes)\ndyes2\n```\n:::\n\n\n# Packages\n\n## Packages {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Cookbooks]{.b .green} are a great way to learn to cook\n    -   *They contain lots of recipes and instructions*\n    -   Browse an online **bookstore** for a cookbook\n    -   **Order** it to add it to your personal **bookshelf**\n    -   To use, **pull** the cookbook off the shelf\n\n::: {.fragment .mt1}\n-   [Packages]{.b .blue} are like cookbooks for R\n    -   *They contain helpful functions and datasets*\n    -   Browse an online **repository** for a package\n    -   **Install** it to add it to your personal **library**\n    -   To use, **load** the package from the library\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li tboujdsn trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n\n::: {.fragment}\n`library(\"pkg_name\")`\n:::\n:::\n:::\n\n## Packages Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: The stringr package adds a function to fix capitalization\n\nstudents <- c(\"mary anne\", \"BENjamin\", \"Lee\")\n\n# ==============================================================================\n\n# PITFALL: But we can't use that function without installing the package\n\nstr_to_title(students) # error\n\n# ==============================================================================\n\n# LESSON: Installing a package using RStudio\n\n# - RStudio > Extras pane > Packages tab > Install button\n\ninstall.packages(\"stringr\")\n\n# PITFALL: Use this command in the console, not in your Quarto document!\n\n# ==============================================================================\n\n# PITFALL: We also need to load the package before we can use it\n\nstr_to_title(students) # error\n\n# ==============================================================================\n\n# LESSON: We load the package using library()\n\nlibrary(\"stringr\")\nstr_to_title(students) # finally works!\n\n# ==============================================================================\n\n# LESSON: We can also keep our packages updated using RStudio\n\n# RStudio > Extras pane > Packages tab > Update button\n\n# ==============================================================================\n\n# USECASE: We can see if a package contains any vignettes (articles)\n\nbrowseVignettes(\"stringr\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
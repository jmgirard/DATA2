{
  "hash": "c408ea89367548aea59b1ccaf732031d",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Foundations of Data Science\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-02-08\"\n    semester: \"Spring 2023\"\n    course: \"399/800\"\n    lecture: \"04b\"\n---\n\n\n::: {.my-title}\n# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}\n\n::: {.my-grey}\n[{{< meta semester >}} | Course {{< meta course >}}]{}<br />\n[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}\n:::\n\n![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n## Roadmap: dplyr Basics\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n1. Column verbs\n  \n2. Row verbs\n\n3. Pipelines\n\n4. Activity\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n# Column verbs\n\n## Basic wrangling verbs {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [tidyverse]{.b .blue} provides tools for wrangling tibbles\n    -   These functions are named after *verbs*\n    -   So if you name your objects after *nouns*...\n    -   ...your code becomes easier to read\n\n::: {.fragment .mt1}\n| Noun(noun) ❌        |  Verb(noun)  ✔️  | \n|:----------------------|:----------------|\n| `blender(fruit)`      | `blend(fruit)`  |\n| `screwdriver(screw)`  | `drive(screw)`  |\n| `boxcutter(box)`      | `cut(box)`      |\n\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li sbiheqdr trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n## Column-focused verbs {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Select]{.b .blue} retains only certain columns/variables\n    -   [`select(TBL, VAR_KEEP, -VAR_DROP)`]{.f3}\n\n::: {.fragment .mt1}\n-   [Mutate]{.b .blue} adds or transforms columns/variables\n    -   [`mutate(TBL, NEW_VAR = OLD_VAR / 1000)`]{.f3}\n:::\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li ifxlrnhk trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n## *Select* Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Load package and inspect example tibble\n\nlibrary(tidyverse) # includes the dplyr package\nstarwars\n\n# ==============================================================================\n\n# USECASE: Retain only the specified variables\n\nsw <- select(starwars, name)\nsw\nsw <- select(starwars, name, sex, species)\nsw\n\n# ==============================================================================\n\n# PITFALL: Don't forget to save the change with assignment\n\nselect(starwars, name, sex, species)\nstarwars # still includes all variables\n\n# ==============================================================================\n\n# USECASE: Retain all variables between two variables\n\nsw <- select(starwars, name, hair_color:eye_color)\nsw\n\n# ==============================================================================\n\n# USECASE: Retain all variables except the specified ones\n\nsw <- select(starwars, -sex, -species)\nsw\nsw <- select(starwars, -c(sex, species))\nsw\nsw <- select(starwars, -c(hair_color:starships))\nsw\n```\n:::\n\n\n\n## *Mutate* Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Create example tibble\n\npatients <- tibble(\n  id = c(\"S1\", \"S2\", \"S3\"),\n  feet = c(6, 5, 5),\n  inches = c(1, 7, 2),\n  pounds = c(176.3, 124.9, 162.6)\n)\npatients\n\n# ==============================================================================\n\n# USECASE: Add one or more variables\n\np2 <- mutate(patients, sex = c(\"M\", \"F\", \"F\"))\np2\n\nages <- c(32, 41, 29)\np2 <- mutate(patients, ages = ages)\np2\n\np2 <- mutate(\n  patients, \n  sex = c(\"M\", \"F\", \"F\"), \n  ages = ages\n)\np2\n\n# ==============================================================================\n\n# USECASE: Compute variables\n\np2 <- mutate(patients, height = feet + inches / 12)\np2\n\np2 <- mutate(patients, ln_pounds = log(pounds))\np2\n\n# ==============================================================================\n\n# USECASE: Overwrite variables\n\npatients <- mutate(patients, height = height / 3.281)\npatients\n\n# ==============================================================================\n\n# USECASE: Duplicate variables\n\np2 <- mutate(patients, weight = pounds)\np2 # both weight and pounds exist\n```\n:::\n\n\n\n# Row verbs\n\n## Row-focused verbs {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n-   [Arrange]{.b .blue} sorts rows based on their values\n    -   [`arrange(TBL, VAR_SORT_UP)`]{.f3}\n    -   [`arrange(TBL, desc(VAR_SORT_DOWN))`]{.f3}\n    -   [`arrange(TBL, VAR_SORT_1ST, VAR_SORT_2ND)`]{.f3}\n\n::: {.fragment .mt1}\n-   [Filter]{.b .blue} retains certain rows based on criteria\n    -   [`filter(TBL, NUM_CRIT > 0)`]{.f3}\n    -   [`filter(TBL, STR_CRIT == \"A\")`]{.f3}\n    -   [`filter(TBL, CRIT1, CRIT2)`]{.f3}\n:::\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li dlprbpnx trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n## *Arrange* Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Sort observations by a variable\n\nstarwars\n\nsw <- arrange(starwars, height)\nsw # sorted by height, ascending\n\nsw <- arrange(starwars, name)\nsw # sorted by name, alphabetically\n\n# ==============================================================================\n\n# USECASE: Sort observations by a variable, in reverse order\n\nsw <- arrange(starwars, desc(height))\nsw # sorted by height, descending\n\nsw <- arrange(starwars, desc(name))\nsw # sorted by name, reverse-alphabetically\n\n# ==============================================================================\n\n# USECASE: Sort observations by multiple variables\n\nsw <- arrange(starwars, hair_color, mass)\nsw # sorted by hair_color, then ties broken by mass\n```\n:::\n\n\n\n## *Filter* Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: Retain only observations that meet a criterion\n\nsw <- filter(starwars, mass > 100)\nsw # only observations with mass greater than 100\n\nsw <- filter(starwars, mass <= 100)\nsw # only observations with mass less than or equal to 100\n\nsw <- filter(starwars, species == \"Human\")\nsw # only observations with species equal to Human\n\nsw <- filter(starwars, species != \"Human\")\nsw # only observations with species not equal to Human\n\n# ==============================================================================\n\n# PITFALL: Don't try to use a single = for testing equality\n\nsw <- filter(starwars, height = 150) # error\n\nsw <- filter(starwars, height == 150) # correct\nsw \n\n# ==============================================================================\n\n# PITFALL: Don't forget that R is case-sensitive\n\nsw <- filter(starwars, species == \"human\")\nsw # no observations left (because it should be Human)\n\n# ==============================================================================\n\n# USECASE: Retain only observations that meet complex criteria\n\nsw <- filter(starwars, mass > 100 & height > 200)\nsw # only observations with mass over 100 AND height over 200\n\nsw <- filter(starwars, height < 100 | hair_color == \"none\")\nsw # only observations with height under 100 OR hair_color equal to none\n\n# ==============================================================================\n\n# PITFALL: Don't forget to complete both conditions\n\nsw <- filter(starwars, mass > 100 & < 200) # error\n\nsw <- filter(starwars, mass > 100 & mass < 200) # correct\nsw\n\n# ==============================================================================\n\n# PITFALL: Don't try to equate a string to a vector\n\nsw <- filter(starwars, species == c(\"Human\", \"Droid\")) # error\n\nsw <- filter(starwars, species %in% c(\"Human\", \"Droid\")) # correct\nsw\n```\n:::\n\n\n\n## *Filter* Cheatsheet {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\" .mytable}\n\n| Symbol | Description            | Num | Chr   |\n|--------|------------------------|-----|-------|\n| `<`    | Less than              | Yes | *No*  |\n| `<=`   | Less than or equal to  | Yes | *No*  |\n| `>`    | More than              | Yes | *No*  |\n| `>=`   | More than or equal to  | Yes | *No*  |\n| `==`   | Equal to               | Yes | Yes   |\n| `!=`   | Not equal to           | Yes | Yes   |\n| `%in%` | Found in               | Yes | Yes   |\n| `&`    | Logical And            | Yes | Yes   |\n| `|`    | Logical Or             | Yes | Yes   |\n\n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li esixrdij trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n# Pipelines\n\n## Pipes and Pipelines {.smaller}\n\n::: {.columns .pv4}\n::: {.column width=\"60%\"}\n- How can we do [multiple operations]{.b .green} to an object?\n    1. `x <- 10`\n    2. `x2 <- sqrt(x)`\n    3. `x3 <- round(x2)`\n    \n::: {.fragment .mt1}\n- This works but is **cumbersome** and **error-prone**\n:::\n\n::: {.fragment .mt1}\n- A better approach is to use [pipes]{.b .blue} and [pipelines]{.b .green}\n    - `x3 <- 10 |> sqrt() |> round()`\n:::\n\n::: {.fragment .mt1}\n- I like to read `|>` as \"and then...\"\n    - \"Take 10 and then sqrt() and then round()\"\n:::\n    \n:::\n\n::: {.column .tc .pv5 width=\"40%\"}\n\n{{< li mhttdvjl trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n:::\n\n\n## Pipes Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: Enable the pipe operator shortcut\n\n# Tools > Global Options... > Code tab > Check \"Use Native Pipe Operator\"\n\n# Type out |> or press Ctrl+Shift+M (Win) / Cmd+Shift+M (Mac)\n\n# ==============================================================================\n\n# LESSON: The pipe pushes objects to a function as its first argument\n\n# TEMPLATE: x |> function_name() is the same as function_name(x)\n\nx <- 10\n\ny <- sqrt(x)\ny\n\ny <- x |> sqrt()\ny\n\n# ==============================================================================\n\n# PITFALL: Don't forget to remove the object from the function call\n\nx |> sqrt(x) # wrong\n\nx |> sqrt() # correct\n\n# ==============================================================================\n\n# USECASE: You can still use arguments when piping\n\nz <- round(3.14, digits = 1)\nz\n\nz <- 3.14 |> round(digits = 1)\nz\n\n# ==============================================================================\n\n# USECASE: Pipes are useful with tibbles and wrangling verbs\n\nstarwars\n\nsw <- select(starwars, name, species, height)\nsw\n\nsw <- starwars |> select(name, species, height)\nsw\n\n# ==============================================================================\n\n# PITFALL: Don't add a pipe without a step after it\n\nsw <- starwars |> select(name, species, height) |> # error\n```\n:::\n\n\n\n## Pipelines Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# USECASE: You can chain multiple pipes together to make a pipeline\n\nx <- 10 |> sqrt() |> round()\nx\n\n# ==============================================================================\n\n# TIP: If you want to see the output of a pipeline, you can pipe to print()\n\nx <- 10 |> sqrt() |> round() |> print()\n\n# ==============================================================================\n\n# TIP: To make your pipelines more readable, move each step to a new line\n\nx <- \n  10 |> \n  sqrt() |> \n  round() |>\n  print()\n\n# ==============================================================================\n\n# PITFALL: Don't put the pipe at the beginning of a line, though\n\nx <- \n  10 \n  |> sqrt()\n  |> round()\n  |> print() # error\n\n# ==============================================================================\n\n# USECASE: Chain together a series of verbs to flexibly wrangle data\n\ntallones <- \n  starwars |> \n  select(name, species, height) |> \n  mutate(height_ft = height / 30.48) |>  \n  filter(height_ft > 7) |> \n  arrange(desc(height_ft)) |>  \n  print()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "767b0b86e90547240b827dbb38174105",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Foundations of Data Science\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-02-20\"\n    semester: \"Spring 2023\"\n    course: \"399/800\"\n    lecture: \"06a\"\n---\n\n\n::: {.my-title}\n# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}\n\n::: {.my-grey}\n[{{< meta semester >}} | Course {{< meta course >}}]{}<br />\n[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}\n:::\n\n![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n\n## Roadmap\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n1. Code Style\n  \n2. Chunk Options\n\n3. More Quarto\n\n4. Activity\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n# Code Style\n\n## Code Style {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n- Style describes *optional* changes\n\n  - e.g., how to name files and objects\n  \n  - e.g., where to add spaces and line breaks\n\n::: {.fragment .mt1}\n- There is no \"right\" or \"wrong\" with style\n:::\n\n::: {.fragment .mt1}\n- But using a consistent code style has benefits\n\n  - Code becomes more readable and predictable\n  \n  - Collaboration becomes easier and smoother\n:::\n\n::: {.fragment .mt1}\n- We will learn about the [tidyverse style guide](https://style.tidyverse.org)\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li kcvtxype trigger=loop delay=5000 colors=primary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n\n## File Names {.smaller}\n\n- File names should be [meaningful]{.b .blue} and [clear]{.b .blue}\n\n  -   [`models.qmd`]{.danger} ➔ `dissertation_study2_models.qmd`\n\n::: {.fragment .mt1}\n- [Avoid special characters]{.b .blue} in names (arguably this includes spaces)\n\n  -   [`M@$teR$ Th3s1s.r`]{.danger} ➔ `masters_thesis.R`\n:::\n\n::: {.fragment .mt1}\n- If you files need to be run in order, [prefix with numbers]{.b .blue}\n\n  -   `1_import.qmd`, `2_model.qmd`, `3_visualize.qmd`\n:::\n\n::: {.fragment .mt1}\n- Use [zero-padding]{.b .blue} as necessary (to sort them properly)\n\n  -   `01_download.qmd`, `02_tidy.qmd`, ..., `10_visualize.qmd`\n:::\n\n\n## Sectioning and Comments {.smaller}\n\n- Use [sections and subsections]{.b .blue} to give the file internal structure\n\n- Load [all packages together]{.b .blue} at the top of the document\n\n- Use [comments to explain]{.b .blue} the \"why\" (not the \"what\" or \"how\")\n\n::: {.fragment}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Packages ------------------------------------------------------\nlibrary(tidyverse)\nlibrary(easystats)\n\n# Prepare Data -------------------------------------------------------\n\n## Import Data\nraw_data <- read_csv(\"example.csv\", na = \"-999\") # Set -999 as missing\n\n## Tidy Data\ntidy_data <- \n  raw_data |> \n  select(id, group, score) |> # Drop unused variables\n  mutate(score = score / 100) # Rescale from 0-100 to 0-1\n\n# Fit Models ---------------------------------------------------------\nfit <- lm(score ~ group, data = tidy_data) # Compare groups' scores\nmodel_parameters(fit)\nmodel_performance(fit)\n```\n:::\n\n:::\n\n\n## Object Naming {.smaller}\n\n- Object names should use a single and [consistent style]{.b .blue}\n  - [`countydata` and `plot_county`]{.danger}\n  - **Snake Case:** `county_data` and `county_plot`\n  - **Camel Case:** `countyData` and `countyPlot`\n\n::: {.fragment .mt1}\n- Use brief, descriptive [noun phrases]{.b .blue} for object names\n  - [`x`]{.danger} ➔ `heart_rate`\n  - [`df`]{.danger} ➔ `aim1_data`\n:::\n\n::: {.fragment .mt1}\n- [Avoid reusing names]{.b .blue} of base R objects and functions\n  - e.g., [`F`, `T`, `c`, `mean`, `sum`, `pi`, `data`]{.danger}\n:::\n\n\n## Spacing {.smaller}\n\n- Put spaces [around most operators]{.b .blue} (arithmetic, relational, and logical)\n  - [`1/2+3*4-5`]{.danger} ➔  `1 / 2 + 3 * 4 - 5`\n  - [`a>3&b<=0`]{.danger} ➔ `a > 3 & b <= 0`\n\n::: {.fragment .mt1}\n- But don't put spaces [around \"high priority\" operators]{.b .green}\n  - [`5 ^ 2`]{.danger} ➔ `5^2`\n  - [`( 1 + 2 ) * 3`]{.danger} ➔ `(1 + 2) * 3`\n  - [`sum ( sales )`]{.danger} ➔ `sum(sales)`\n  - [`df $ variable`]{.danger} ➔ `df$variable`\n:::\n\n::: {.fragment .mt1}\n- Always put a space [after a comma]{.b .blue} but never before a comma\n  - [`c(1 ,2,3 ,4, 5)`]{.danger} ➔ `c(1, 2, 3, 4, 5)`\n:::\n\n\n## Argument Specification {.smaller}\n\n- Function arguments usually either provide [data]{.b .green} or customize [details]{.b .blue}\n  - e.g., the `round()` function has two arguments:\n  - `x` contains the number(s) to be rounded (a [data]{.b .green} argument)\n  - `digits` contains the number of digits to round to (a [details]{.b .blue} argument)\n\n::: {.fragment .mt1}\n- In a function call, [omit]{.b .green} (i.e., remove) the names of [data]{.b .green} arguments\n  - e.g., omit `x = `\n:::\n\n::: {.fragment .mt1}\n- In a function call, [include]{.b .blue} the full names of [detail]{.b .blue} arguments\n  - e.g., include `details = `\n:::\n\n::: {.fragment .mt1}\n- [`round(x = 2 / 3, digits = 1)`]{.danger} ➔ `round(2 / 3, digits = 1)`\n:::\n\n\n## Line Length and Indents {.smaller}\n\n- Strive to limit your code to just **80 characters per line**\n  - RStudio can show you a vertical line at 80 characters:<br />\n    *Tools > Global Options > Code > Display > Show Margin (Column=80)*\n\n::: {.fragment .mt1}\n- If a line is longer than 80 characters, [break it up]{.b .blue} and [align it]{.b .green}\n  - Put each argument on a separate, indented line\n  - Align the indenting of opening and closing lines\n:::\n\n::: {.fragment .mt1}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Too long!\ndo_something_very_complicated(\"that\", requires, many, arguments, \"some of which may be long\")\n\n# Much better!\ndo_something_very_complicated(\n  something = \"that\",\n  requires = many,\n  arguments = \"some of which may be long\"\n)\n```\n:::\n\n:::\n\n\n## Pipes and Pipelines {.smaller}\n\n- Line break and [indent after assignment]{.b .blue}\n\n- Follow each pipe with a [line break]{.b .blue}\n\n- [Separate long lines]{.b .blue} of arguments with line breaks\n\n- [Indent further]{.b .blue} for arguments\n\n- [Align the indenting]{.b .blue} of opening and closing lines\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hard to read!\nx <- df |> step_one(arg = TRUE) |> step_two(arg1 = 1, arg2 = 2, arg3 = 3) |> step_three()\n\n## Easier to read!\nx <- \n  df |> \n  step_one(arg = TRUE) |> \n  step_two(\n    arg1 = 1,\n    arg2 = 2,\n    arg3 = 3\n  ) |> \n  step_three()\n```\n:::\n\n\n\n# Chunk Options\n\n## Chunk Options {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n- The YAML header customizes our document\n  - e.g., setting the `author:` or `format:` fields\n\n::: {.fragment .mt1}\n- YAML can also customize each code chunk\n  - We add a special comment to the top of it\n  - The syntax we use is called the \"hash pipe\"<br />\n  `#| field: value`\n:::\n\n::: {.fragment .mt1}\n- We can also give each chunk a unique name\n  - This is helpful when troubleshooting\n  - It also helps when caching results\n:::\n\n:::\n\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li iyeyavvi trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Chunk Options Live Coding\n\n\n````qmd\n# Suppress messages\n```{r}\nlibrary(tidyverse)\n```\n\n```{r}\n#| message: false\n\nlibrary(tidyverse)\n```\n\n# Suppress warnings\n\n```{r}\nlibrary(palmerpenguins)\nggplot(penguins, aes(x = body_mass_g)) + geom_histogram()\n```\n\n```{r}\n#| message: false\n\nlibrary(palmerpenguins)\nggplot(penguins, aes(x = body_mass_g)) + geom_histogram()\n```\n\n```{r}\n#| message: false\n#| warning: false\n\nlibrary(palmerpenguins)\nggplot(penguins, aes(x = body_mass_g)) + geom_histogram()\n```\n\n# Include code but don't run it\n```{r}\n1 + 2\n```\n\n```{r}\n#| eval: false\n\n1 + 2\n```\n\n# Hide code but still run it\n```{r}\n1 + 2\n```\n\n```{r}\n#| echo: false\n\n1 + 2\n```\n\n# Include a chunk with an error in it\n```{r}\nmean()\n```\n\n```{r}\n#| error: true\n\nmean()\n```\n\n# Fold code for more compact output\n`#| code-fold: true` or `#| code-fold: show`\n\n```{r}\n#| code-fold: true\n\npi * 10^2\n```\n\n# Collapse output into the code block\n\n```{r}\n#| collapse: true\n\npi * 10^2\n```\n\n# Control figure size\n```{r}\nggplot(mpg, aes(x = displ, y = hwy)) + geom_point()\n```\n\n```{r}\n#| fig-width: 10\n#| fig-height: 5\n\nggplot(mpg, aes(x = displ, y = hwy)) + geom_point()\n```\n\n# Name a chunk\n```{r setup}\nlibrary(tidyverse)\n```\n\n# Cache (save) a slow chunk\n```{r diamondsplot}\n#| cache: true\n\nggplot(diamonds, aes(x = carat, y = price)) + geom_point()\n```\n\n````\n\n\n\n\n# More Quarto\n\n## Equations {.smaller}\n\n- Math equations can be added to Quarto documents using [MathJax](https://www.mathjax.org/)\n  - Wrap the MathJax equation with `$` for *inline* (compressed) mode\n  - Wrap the MathJax equation with `$$` for *display* (expanded) mode\n  - This can only be done in Markdown (outside of any R chunk)\n\n::: {.fragment .mt1}\n- `$\\bar{x} = \\frac{1}{n} \\sum_{i=1}^{n} x_{i}$`<br />\n$\\bar{x} = \\frac{1}{n} \\sum_{i=1}^{n} x_{i}$\n:::\n\n::: {.fragment .mt1}\n- `$$\\bar{x} = \\frac{1}{n} \\sum_{i=1}^{n} x_{i}$$`<br />\n$$\\bar{x} = \\frac{1}{n} \\sum_{i=1}^{n} x_{i}$$\n:::\n\n## Extensions and Videos {.smaller}\n\n- Quarto has an [extension system](https://quarto.org/docs/extensions/) that lets you add features via \"shortcodes\"\n\n  - e.g., I made an extension to [embed animated icons](https://github.com/jmgirard/lordicon) in documents\n\n  - There is also an extension to [embed video files](https://quarto.org/docs/authoring/videos.html) in documents\n\n::: {.fragment .mt1}\n- To embed a video in a Quarto document, use the video shortcode outside a chunk\n\n  - `{{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}}`\n\n::: {.tc}\n\n{{< video https://www.youtube.com/embed/wo9vZccmqwc width=\"400\" height=\"250\" >}}\n\n\n:::\n\n:::\n\n\n## Embedding Resources {.smaller}\n\n- HTML documents have many resources (e.g., images, stylesheets, JavaScript)\n\n::: {.fragment .mt1}\n- These are saved in a `_files` directory by default\n  - When you render `x.qmd`, Quarto creates `x.html` and `x_files/`\n:::\n\n::: {.fragment .mt1}\n- To view your `x.html` file correctly, others need `x_files/` too!\n:::\n\n::: {.fragment .mt1}\n- Or you can embed the resources into the HTML file itself\n  - This will make `x.html` larger but it will be \"self-contained\"\n  - To do so, adjust the YAML header in `x.qmd` to include the following:\n  \n```yaml\nformat:\n  html:\n    embed-resources: true\n```\n:::\n\n\n## HTML Theming\n\nYou can change the theme of your document via YAML header\n\nThere are currently 25 different [HTML themes](https://quarto.org/docs/output-formats/html-themes.html) to choose from\n\n::: {.fragment .mt1}\n```yaml\nformat:\n  html:\n    theme: darkly\n```\n\n![](https://quarto.org/docs/output-formats/images/html-dark.png){.absolute width=\"800\"}\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
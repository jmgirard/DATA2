{
  "hash": "45134c747354c5b01663e6c75d9bb6c1",
  "result": {
    "markdown": "---\ntitle: \"Lecture [11b] Activity\"\n---\n\n\n![](../../img/programmer_2780E3.svg){.hero}\n\n## Question 1\n\nInstall and load the \\{Lahman\\} package, which contains data about baseball teams and players.\n\na. Explore how the `People`, `Batting`, and `Salaries` tables are connected.\n\nb. How would you join this data to compare the salaries of right-handed and left-handed batters? Do so using a \\{tidyverse\\} function and select only the relevant variables.\n\n*Note: These tables are data frames not tibbles (so they will print a **lot** of rows). To fix this, you can use `as_tibble()` to convert them to tibbles.*\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n**Answer (a)**\n\nAll three tables are connected via the `playerID` variable.\n\n**Answer (b)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(Lahman) # must be installed first\n\njoined_data <- \n  inner_join(People, Salaries, by = \"playerID\") |>  \n  select(playerID, nameFirst, nameLast, bats, yearID, teamID, salary) |>\n  as_tibble() |> \n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 26,428 × 7\n   playerID  nameFirst nameLast bats  yearID teamID  salary\n   <chr>     <chr>     <chr>    <fct>  <int> <fct>    <int>\n 1 aardsda01 David     Aardsma  R       2004 SFN     300000\n 2 aardsda01 David     Aardsma  R       2007 CHA     387500\n 3 aardsda01 David     Aardsma  R       2008 BOS     403250\n 4 aardsda01 David     Aardsma  R       2009 SEA     419000\n 5 aardsda01 David     Aardsma  R       2010 SEA    2750000\n 6 aardsda01 David     Aardsma  R       2011 SEA    4500000\n 7 aardsda01 David     Aardsma  R       2012 NYA     500000\n 8 aasedo01  Don       Aase     R       1986 BAL     600000\n 9 aasedo01  Don       Aase     R       1987 BAL     625000\n10 aasedo01  Don       Aase     R       1988 BAL     675000\n# ℹ 26,418 more rows\n```\n:::\n:::\n\n\n\n</blockquote></details></p>\n\n## Question 2\n\na. Join the `band_members` and `band_instruments` tibbles (included in \\{tidyverse\\}) using all four basic types of joins. Compare the results.\n\nb. Now join the `band_members` and `band_instruments2` tibbles in a way that adds the instrument played by each name in `band_members.`\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n**Answer (a)**\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(band_members, band_instruments, by = \"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n```\n:::\n\n```{.r .cell-code}\nright_join(band_members, band_instruments, by = \"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith <NA>    guitar\n```\n:::\n\n```{.r .cell-code}\ninner_join(band_members, band_instruments, by = \"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n```\n:::\n\n```{.r .cell-code}\nfull_join(band_members, band_instruments, by = \"name\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith <NA>    guitar\n```\n:::\n:::\n\n\n**Answer (b)**\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(band_members, band_instruments2, by = c(\"name\" = \"artist\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n```\n:::\n:::\n\n\n\n\n</blockquote></details></p>\n\n## Question 3\n\nExplore what happens when you join two tables with duplicated/repeated keys.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- tibble(\n  key = c(1, 2, 2, 3),\n  val_x = c(\"x1\", \"x2\", \"x3\", \"x4\")\n)\ny <- tibble(\n  key = c(1, 2, 2, 3),\n  val_y = c(\"y1\", \"y2\", \"y3\", \"y4\")\n)\n```\n:::\n\n\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(x, y, by = \"key\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in left_join(x, y, by = \"key\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 2 of `x` matches multiple rows in `y`.\nℹ Row 2 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n    key val_x val_y\n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n3     2 x2    y3   \n4     2 x3    y2   \n5     2 x3    y3   \n6     3 x4    y4   \n```\n:::\n:::\n\n\nThe key gets duplicated for each pairwise combination.\n\n</blockquote></details></p>\n\n---\n\n*Note that there is no need to turn in Activities. These are just for practice!*\n",
    "supporting": [
      "11b_Activity_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
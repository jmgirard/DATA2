{
  "hash": "98875db65e0524abbfe92e1274bf208d",
  "result": {
    "markdown": "---\ntitle: \"Lecture [13b] Activity\"\n---\n\n\n![](../../img/programmer_2780E3.svg){.hero}\n\n## Question 1\n\na) Use `if_else()` to add a new variable to `mpg` called `size` that equals “LARGE” if class is “suv”, “minivan”, or “pickup” and equals “SMALL” otherwise. Then select the `model`, `class`, and `size` variables.\n\nb) For practice, repeat the first part of this question but this time use `case_when()`. Is the Subaru Forester AWD model LARGE or SMALL?\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n**Part (a)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nmpg |> \n  mutate(\n    size = if_else(\n      condition = class %in% c(\"suv\", \"minivan\", \"pickup\"),\n      true = \"LARGE\",\n      false = \"SMALL\"\n    )\n  ) |> \n  select(model, class, size)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 234 × 3\n   model      class   size \n   <chr>      <chr>   <chr>\n 1 a4         compact SMALL\n 2 a4         compact SMALL\n 3 a4         compact SMALL\n 4 a4         compact SMALL\n 5 a4         compact SMALL\n 6 a4         compact SMALL\n 7 a4         compact SMALL\n 8 a4 quattro compact SMALL\n 9 a4 quattro compact SMALL\n10 a4 quattro compact SMALL\n# ℹ 224 more rows\n```\n:::\n:::\n\n\n**Part (b)**\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg |> \n  mutate(\n    size = case_when(\n      class == \"suv\" ~ \"LARGE\",\n      class == \"minivan\" ~ \"LARGE\",\n      class == \"pickup\" ~ \"LARGE\",\n      .default = \"SMALL\"\n    )\n  ) |> \n  select(model, class, size) |> \n  filter(model == \"forester awd\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  model        class size \n  <chr>        <chr> <chr>\n1 forester awd suv   LARGE\n2 forester awd suv   LARGE\n3 forester awd suv   LARGE\n4 forester awd suv   LARGE\n5 forester awd suv   LARGE\n6 forester awd suv   LARGE\n```\n:::\n:::\n\n\nThe Subaru Forester AWD is LARGE.\n\n</blockquote></details></p>\n\n\n## Question 2\n\na) Create a custom function called `nroot` that takes in two arguments, `x` and `n`, and returns the value of `x` raised to the power of `(1 / n)`. Test your function by calculating the cube-root of 343 (i.e., set `n` to 3).\n\nb) Set the default value for the `n` argument to be 2 (i.e., make `nroot(x)` equal to `sqrt(x)` by default). Test this default by calculating the square root of 121 using your function but without specifying `n`.\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n**Part (a)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnroot <- function(x, n) {\n  x ^ (1 / n)\n}\n\nnroot(343, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n:::\n\n\n**Part (b)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnroot <- function(x, n = 2) {\n  x ^ (1 / n)\n}\n\nnroot(121)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n:::\n\n\n</blockquote></details></p>\n\n\n## Challenge\n\na) Use `$` operator to extract the vector of `country` names from the `population` tibble (included in \\{tidyverse\\}). Then use the `unique()` function on this vector so that each country name is only included once.\n\nb) Create a custom function that filters `population` to only include the data from a single country (specified by an argument) and then writes the results to a separate csv data file named after that country.\n\nc) Test your function on one country and, once it is working, use `walk()` to apply this function to the vector of all countries created in part (a).\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n**Part (a)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <- unique(population$country)\n```\n:::\n\n\n**Part (b)**\n\n::: {.cell}\n\n```{.r .cell-code}\nsave_country_data <- function(country_name) {\n  df <- population |> filter(country == country_name)\n  csv_filename <- str_glue(\"data/{country_name}.csv\")\n  write_csv(df, csv_filename)\n}\n```\n:::\n\n\n**Part (c)**\n\n::: {.cell}\n\n```{.r .cell-code}\nsave_country_data(\"China\")\nwalk(.x = countries, .f = save_country_data)\n```\n:::\n\n\n</blockquote></details></p>\n\n\n---\n\n*Note that there is no need to turn in Activities. These are just for practice!*\n",
    "supporting": [
      "13b_Activity_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "f474329c9ac9ce2b654745cbcb84c228",
  "result": {
    "markdown": "---\ntitle: \"Lecture [10a] Activity\"\n---\n\n\n![](../../img/programmer_2780E3.svg){.hero}\n\n## Question 1 (Summarize)\n\nSummarize the `txhousing` tibble (included in \\{tidyverse\\}) to recreate the following tibble (where `n_obs` is the number of observations, `n_cities` is the number of unique/distinct cities, `mdn_listings` is the median number of monthly listings, `max_listings` is the maximum number of monthly listings). Ignore/remove any missing values when calculating the last two summary variables.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  n_obs n_cities mdn_listings max_listings\n  <int>    <int>        <dbl>        <dbl>\n1  8602       46         1283        43107\n```\n:::\n:::\n\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntxhousing |> \n  summarize(\n    n_obs = n(),\n    n_cities = n_distinct(city),\n    mdn_listings = median(listings, na.rm = TRUE),\n    max_listings = max(listings, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  n_obs n_cities mdn_listings max_listings\n  <int>    <int>        <dbl>        <dbl>\n1  8602       46         1283        43107\n```\n:::\n:::\n\n\n</blockquote></details></p>\n\n## Question 2 (Grouped Summarize)\n\nSummarize the `txhousing` tibble to recreate the following tibble (where `m_price` is the mean of the `median` variable and `s_price` is the standard deviation of the `median` variable, both per city-year combination).\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 736 × 4\n   city     year m_price s_price\n   <chr>   <int>   <dbl>   <dbl>\n 1 Abilene  2000  66600    5714.\n 2 Abilene  2001  70975    6331.\n 3 Abilene  2002  68600    6756.\n 4 Abilene  2003  71933.   5598.\n 5 Abilene  2004  74867.   7892.\n 6 Abilene  2005  87592.  10139.\n 7 Abilene  2006 100292.   5187.\n 8 Abilene  2007 103650   10931.\n 9 Abilene  2008 107133.  10212.\n10 Abilene  2009 108367.   9850.\n# ℹ 726 more rows\n```\n:::\n:::\n\n\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntxhousing |> \n  summarize(\n    m_price = mean(median),\n    s_price = sd(median),\n    .by = c(city, year)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 736 × 4\n   city     year m_price s_price\n   <chr>   <int>   <dbl>   <dbl>\n 1 Abilene  2000  66600    5714.\n 2 Abilene  2001  70975    6331.\n 3 Abilene  2002  68600    6756.\n 4 Abilene  2003  71933.   5598.\n 5 Abilene  2004  74867.   7892.\n 6 Abilene  2005  87592.  10139.\n 7 Abilene  2006 100292.   5187.\n 8 Abilene  2007 103650   10931.\n 9 Abilene  2008 107133.  10212.\n10 Abilene  2009 108367.   9850.\n# ℹ 726 more rows\n```\n:::\n:::\n\n\n</blockquote></details></p>\n\n## Question 3 (Grouped Mutate)\n\nUse a grouped mutate to add a new variable to the `txhousing` tibble that shows the average number of sales for that city in that year. Select only the `city`, `year`, `month`, and `sales` variables, in addition to the newly created variable.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8,602 × 5\n   city     year month sales avg_sales\n   <chr>   <int> <int> <dbl>     <dbl>\n 1 Abilene  2000     1    72      115.\n 2 Abilene  2000     2    98      115.\n 3 Abilene  2000     3   130      115.\n 4 Abilene  2000     4    98      115.\n 5 Abilene  2000     5   141      115.\n 6 Abilene  2000     6   156      115.\n 7 Abilene  2000     7   152      115.\n 8 Abilene  2000     8   131      115.\n 9 Abilene  2000     9   104      115.\n10 Abilene  2000    10   101      115.\n# ℹ 8,592 more rows\n```\n:::\n:::\n\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntxhousing |> \n  mutate(\n    avg_sales = mean(sales),\n    .by = c(city, year)\n  ) |> \n  select(city, year, month, sales, avg_sales)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8,602 × 5\n   city     year month sales avg_sales\n   <chr>   <int> <int> <dbl>     <dbl>\n 1 Abilene  2000     1    72      115.\n 2 Abilene  2000     2    98      115.\n 3 Abilene  2000     3   130      115.\n 4 Abilene  2000     4    98      115.\n 5 Abilene  2000     5   141      115.\n 6 Abilene  2000     6   156      115.\n 7 Abilene  2000     7   152      115.\n 8 Abilene  2000     8   131      115.\n 9 Abilene  2000     9   104      115.\n10 Abilene  2000    10   101      115.\n# ℹ 8,592 more rows\n```\n:::\n:::\n\n\n</blockquote></details></p>\n\n## Optional Challenge\n\nRead the documentation for the `first()`, `last()`, and `nth()` summary functions (they all share a single documentation page). Then apply these functions to do the following: (1) calculate the average number of monthly `listings` in each city (removing any missing values), and then (2) find the cities with the highest, second-highest, second-lowest, and lowest average number of monthly listings.\n\n<p><details>\n<summary>Click here for the answer key</summary>\n<blockquote>\n\n::: {.cell}\n\n```{.r .cell-code}\ntxhousing |> \n  summarize(\n    m_listings = mean(listings, na.rm = TRUE),\n    .by = city\n  ) |> \n  summarize(\n    most = first(city, order_by = m_listings),\n    second_most = nth(city, n = 2, order_by = m_listings),\n    second_least = nth(city, n = -2, order_by = m_listings),\n    least = last(city, order_by = m_listings)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  most       second_most second_least least  \n  <chr>      <chr>       <chr>        <chr>  \n1 San Marcos Nacogdoches Dallas       Houston\n```\n:::\n:::\n\n</blockquote></details></p>\n\n---\n\n*Note that there is no need to turn in Activities. These are just for practice!*\n",
    "supporting": [
      "10a_Activity_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
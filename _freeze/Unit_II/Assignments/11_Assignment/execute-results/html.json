{
  "hash": "cd842a42241142059b047d06fb0062d2",
  "result": {
    "markdown": "---\ntitle: \"Week 11 Assignment\"\n---\n\n\n![](../../img/programming_357EDD.svg){.hero}\n\n## Instructions\n\n*Create a new Quarto document (HTML format), clear out the boilerplate code/text, and use this document to store your answers to each of the six questions below. Be sure to enable `embed-resources` using the header below. If your answer involves writing text, then use markdown to write 2--4 sentences per question; if you answer involves running code, then use one or more code chunks. For questions that ask you to fix code, correct any errors (while achieving the stated goal) and include only the working code in your document.*\n\n```markdown\n---\nformat: \n  html:\n    embed-resources: true\n---\n```\n\n*Please clearly mark which part of your document is answering which question (e.g., using markdown headings) and remove any \"scratch work\" or failed attempts from your document before submitting it. Finally, note that many essay-style questions will require you to read between the lines and use your imagination (as opposed to just looking up the answer in the lecture).*\n\n\n::: {.cell}\n\n:::\n\n\n\n## Question 1\n\n*For each question in this section, read what the user wanted to do, look at their code (which didn't work as intended), and fix it for them.*\n\na) I want each row to contain the number of cases and the population of a single country in a single year.\n\n\n::: {.cell renv.ignore='true'}\n\n```{.r .cell-code}\ntable2 |>  \n  pivot_longer(\n    names_from = type,\n    values_from = count\n  )\n```\n:::\n\n\n<p><details><summary>Hint</summary><blockquote>\n\n`table2` is a real tibble included in `tidyverse`. This is what the output should look like:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n:::\n\n\n</blockquote></details></p>\n\nb) I want a tibble that contains all the sales and also includes the name of the customer who was involved in those sales (if available).\n\n\n::: {.cell renv.ignore='true'}\n\n```{.r .cell-code}\ncustomers <- tibble(\n  id = 1:4, \n  name = c(\"Bennie Factor\", \"Joe King\", \"Jack Pott\", \"Kay Oss\")\n)\n\nsales <- tibble(\n  date = c(\"01/10\", \"01/10\", \"01/15\", \"01/19\", \"01/22\", \"01/23\"),\n  customer = c(1, 3, 5, 3, 3, 1),\n  amount = c(120.78, 224.31, 133.84, 201.22, 263.72, 199.84)\n)\n\ninner_join(\n  x = sales, \n  y = customers, \n  by = \"id\"\n)\n```\n:::\n\n\n<p><details><summary>Hint</summary><blockquote>\nThis is what the output should look like:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  date  customer amount name         \n  <chr>    <dbl>  <dbl> <chr>        \n1 01/10        1   121. Bennie Factor\n2 01/10        3   224. Jack Pott    \n3 01/15        5   134. <NA>         \n4 01/19        3   201. Jack Pott    \n5 01/22        3   264. Jack Pott    \n6 01/23        1   200. Bennie Factor\n```\n:::\n:::\n\n\n</blockquote></details></p>\n\n## Question 2\n\n\n\n\n\nImport the `couples.rds` file (available on Canvas) into R and examine its contents. Note that it is an RDS file not a CSV file, so you should use `read_rds()` to import it.\n\nThis file contains simulated/fake data from a study of 30 couples in which one member has a chronic illness. The `satisfaction` variable contains two numbers separated by a semi-colon. The first number is the life satisfaction rating of the \"index\" or member with a chronic illness, and the second number is the life satisfaction rating of the \"partner\" or member without a chronic illness.\n\na) Import the `couples.rds` data file and separate the `satisfaction` variable into two variables named `index` and `partner`.\n\nb) Then use `mutate()` to convert these two new variables from strings to numbers and save the output to use in later questions.\n\n<p><details><summary>Hint</summary><blockquote>\nYour output should look like:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30 × 4\n   couple years_together index partner\n   <chr>           <dbl> <dbl>   <dbl>\n 1 001              16.9 -0.86   -0.58\n 2 002              16.5 -1.62   -0.71\n 3 003               9.5 -0.7     2.34\n 4 004               9.3  3.04    4.06\n 5 005               1   -0.13    1.28\n 6 006              18.6 -0.53    0.9 \n 7 007              19.7 -0.82    0.89\n 8 008              13.9 -1.03    1.42\n 9 009              23.8 -1.51    0.17\n10 010              15.6 -0.47    1.11\n# ℹ 20 more rows\n```\n:::\n:::\n\n\n</blockquote></details></p>\n\n## Question 3\n\na. Reshape the data from the previous question such that each row contains the data from a single individual (with variables for `couple`, `years_together`, `member`, and `satisfaction`). Save the output to use for the next question.\n\nb. Create a new variable called `id` that uniquely identifies each individual participant in the tibble created in Q3a by uniting the `couple` number and the `member` type variables separated by an underscore (and using an argument to retain the two variables being united).\n\n<p><details><summary>Hint</summary><blockquote>\nYour output should look like:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 60 × 5\n   id          couple years_together member  satisfaction\n   <chr>       <chr>           <dbl> <chr>          <dbl>\n 1 001_index   001              16.9 index          -0.86\n 2 001_partner 001              16.9 partner        -0.58\n 3 002_index   002              16.5 index          -1.62\n 4 002_partner 002              16.5 partner        -0.71\n 5 003_index   003               9.5 index          -0.7 \n 6 003_partner 003               9.5 partner         2.34\n 7 004_index   004               9.3 index           3.04\n 8 004_partner 004               9.3 partner         4.06\n 9 005_index   005               1   index          -0.13\n10 005_partner 005               1   partner         1.28\n# ℹ 50 more rows\n```\n:::\n:::\n\n\n</blockquote></details></p>\n\n## Question 4\n\nInstall and load the \\{Lahman\\} package, which contains data about baseball players. The questions in this section will use the `People` and `Salaries` data frames from this package. \n\na) Convert both tables from data frames to tibbles using `as_tibble()` and assignment.\n\nb) Create a new tibble called `Archers` that only includes players from the `People` tibble with the last name \"Archer\" and the following variables: `playerID`, `nameFirst`, `nameLast`, and `debut`.\n\n<p><details><summary>Hint</summary><blockquote>\nYou may not need to use new Unit II functions for this part... Your output should look like:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n  playerID  nameFirst nameLast debut     \n  <chr>     <chr>     <chr>    <chr>     \n1 archech01 Chris     Archer   2012-06-20\n2 archefr01 Fred      Archer   1936-09-05\n3 archeji01 Jimmy     Archer   1904-09-06\n4 archeji02 Jim       Archer   1961-04-30\n```\n:::\n:::\n\n\n</blockquote></details></p>\n\n## Question 5\n\na. Merge the `Archers` and `Salaries` tables in such a way that each player's salaries are shown but players without salary information are dropped.\n\n<p><details><summary>Hint</summary><blockquote>\nYour output should look like:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 8\n  playerID  nameFirst nameLast debut      yearID teamID lgID   salary\n  <chr>     <chr>     <chr>    <chr>       <int> <fct>  <fct>   <int>\n1 archech01 Chris     Archer   2012-06-20   2014 TBA    AL     500000\n2 archech01 Chris     Archer   2012-06-20   2015 TBA    AL    1166667\n3 archech01 Chris     Archer   2012-06-20   2016 TBA    AL    2916667\n```\n:::\n:::\n\n\n</blockquote></details></p>\n\nb. Would a full join be helpful in the scenario described in Q5a? Why or why not?\n\n\n## Question 6\n\nWhat is a relational database and when might a data scientist use one? How do the join functions help when working with a relational database?\n\n\n---\n\n✅ Done! *Please save and then render your document to an HTML file. Check it over to make sure it is complete (and rendered properly) and then upload this file to Canvas by the deadline listed on the syllabus. Note that, if any of your code chunks has an error in it, the HTML file will not render properly (this is why removing scratch work is important).*\n",
    "supporting": [
      "11_Assignment_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "145980b7d8d56238c9bc04c3768694dd",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Foundations of Data Science\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-03-20\"\n    semester: \"Spring 2023\"\n    course: \"399/800\"\n    lecture: \"10a\"\n---\n\n\n::: {.my-title}\n# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}\n\n::: {.my-grey}\n[{{< meta semester >}} | Course {{< meta course >}}]{}<br />\n[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}\n:::\n\n![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n## Roadmap\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n1. Summarize\n  \n2. Grouped Summarize\n\n3. Grouped Mutate\n\n4. Activity\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n# Summarize\n\n## Summarize {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n-   Although we store data about many observations...\n-   ...we often want to [summarize across]{.b .blue} observations\n    -   This is like [folding]{.b .green} the tibble down to [one row]{.b .green}\n\n::: {.fragment .mt1}\n-   We've seen functions that summarize vectors\n    -   `length()`, `sum()`, `min()`, `max()`\n    -   `mean()`, `median()`, `sd()`, `var()`\n:::\n\n::: {.fragment .mt1}\n-   `summarize()` lets us use them on tibbles\n    -   It works very similarly to `mutate()`\n    -   It always creates a tibble as output\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li uhmqrsgl trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Summarize Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nsales <- \n  tibble(\n    customer = c(1, 2, 3, 1, 3),\n    store = c(\"A\", \"A\", \"A\", \"B\", \"B\"),\n    items = c(25, 20, 16, 10, 5),\n    spent = c(685, 590, 392, 185, 123)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# USECASE: Summarize the typical sales\n\nmy_summary <- \n  sales |> \n  summarize(\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# PITFALL: Don't use summary() instead of summarize()\n\nmy_summary <- \n  sales |> \n  summary(\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  ) |> \n  print() # not a tibble\n\n# ==============================================================================\n\n# USECASE: Use more than one summary function\n\nmy_summary <- \n  sales |> \n  summarize(\n    total_items = sum(items),\n    total_spent = sum(spent),\n    avg_items = mean(items),\n    avg_spent = mean(spent)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# USECASE: Use counting functions\n\nmy_counts <- \n  sales |> \n  summarize(\n    n_sales = n(),\n    n_customers = n_distinct(customer),\n    n_stores = n_distinct(store)\n  ) |> \n  print()\n```\n:::\n\n\n# Grouped Summarize\n\n## Grouped Summarize {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n-   We can also summarize a tibble [by group]{.b .blue}\n    -   This is like [folding]{.b .green} the tibble multiple times\n    -   Specifically, we fold down to [one row per group]{.b .green}\n\n::: {.fragment .mt1}\n-   We just add the `.by` argument to `summarize()`\n    -   We can group by one or many variables\n    -   With many, we group by their combinations\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li pmwtbpap trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Grouped Summarize Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# SETUP: We will need tidyverse and an example dataset\n\nlibrary(tidyverse)\n\nsales <- \n  tibble(\n    customer = c(1, 2, 3, 1, 3),\n    store = c(\"A\", \"A\", \"A\", \"B\", \"B\"),\n    items = c(25, 20, 16, 10, 5),\n    spent = c(685, 590, 392, 185, 123)\n  ) |> \n  print()\n\n# ==============================================================================\n\n# USECASE: Summarize per store\n\nsales |> \n  summarize(\n    customers = n_distinct(customer),\n    items_sold = sum(items),\n    total_sales = sum(spent),\n    avg_items = mean(items),\n    avg_spent = mean(spent),\n    .by = store\n  )\n\n# ==============================================================================\n\n# USECASE: Summarize per customer\n\nsales |> \n  summarize(\n    n_visits = n(),\n    items_bought = sum(items),\n    total_spent = sum(spent),\n    stores_visited = n_distinct(store),\n    .by = customer\n  )\n\n# ==============================================================================\n\n# USECASE: Summarize per customer-store combination\n\nsales |> \n  summarize(\n    n_visits = n(),\n    items_bought = sum(items),\n    total_spent = sum(spent),\n    .by = c(customer, store)\n  )\n\n# ==============================================================================\n\n# SETUP: Let's get a larger, more realistic dataset\n\n# Extra pane > Packages tab > Install > nycflights13\n\nlibrary(\"nycflights13\")\n\nflights\n\n# ==============================================================================\n\n# USECASE: Find the carrier with the lowest average delays\n\nflights |> \n  summarize(\n    m_delay = mean(dep_delay, na.rm = TRUE),\n    .by = carrier\n  ) |> \n  arrange(m_delay)\n\n# ==============================================================================\n\n# LESSON: We can also group by multiple variables\n\n# USECASE: Let's find the day of the year with the most flights\n\nflights |> \n  summarize(\n    n_flights = n(),\n    .by = c(month, day)\n  ) |> \n  arrange(desc(n_flights))\n\n# ==============================================================================\n\n# Note how this is different from summarizing by day only (365 vs. 31)\n\nflights |> \n  summarize(\n    n_flights = n(),\n    .by = day\n  ) |> \n  arrange(desc(n_flights))\n```\n:::\n\n\n# Grouped Mutate\n\n## Grouped Mutate {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n-   We can also [mutate]{.b .blue} a tibble by group\n    -   Adds the summary values in a new column\n    -   They will be recycled for groups with many rows\n    \n::: {.fragment .mt1}\n-   We now have four useful tools for different jobs\n    -   Ungrouped summarize: fold to one row overall\n    -   Grouped summarize: fold to one row per group\n    -   Ungrouped mutate: add summaries overall\n    -   Grouped mutate: add summaries per group\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li qygayvwp trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Grouped Mutate Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nsales\n\n# Calculates the total sum (across both stores)\nsales |> \n  summarize(\n    items_sum_total = sum(items)\n  )\n\n# Calculates the store sums\nsales |> \n  summarize(\n    items_sum_store = sum(items),\n    .by = store\n  )\n\n# Appends and recycles the total sum (across both stores)\nsales |> \n  mutate(\n    items_sum_total = sum(items),\n    items_pct_total = items / items_sum_total\n  )\n\n# Appends and recycles the store sums\nsales |> \n  mutate(\n    items_sum_store = sum(items),\n    items_pct_store = items / items_sum_store,\n    .by = store\n  )\n\n# What if you want both? You can!\n\nsales |> \n  mutate(\n    items_sum_total = sum(items),\n    items_pct_total = items / items_sum_total\n  ) |> \n  mutate(\n    items_sum_store = sum(items),\n    items_pct_store = items / items_sum_store,\n    .by = store\n  )\n\nflights \n\n# .by can also be used with mutate()\nflights |> \n  select(year:dep_time, carrier, dep_delay) |> \n  mutate(\n    mean_dep_delay = mean(dep_delay, na.rm = TRUE),\n    .by = carrier\n  )\n\n# Compare this to summarize version\nflights |> \n  select(year:dep_time, carrier, dep_delay) |> \n  summarize(\n    mean_dep_delay = mean(dep_delay, na.rm = TRUE),\n    .by = carrier\n  )\n\n# Example longitudinal data\ndat <- \n  tibble(\n    person = rep(101:103, each = 4),\n    sex = rep(c(\"M\", \"F\", \"M\"), each = 4),\n    age = rep(c(13, 10, 12), each = 4), \n    visit = rep(1:4, times = 3),\n    score = round(rnorm(12), digits = 1)\n  ) |> \n  print()\n\n# Another grouped mutate vs grouped summarize example\ndat |> \n  mutate(\n    n_visits = n(), \n    .by = person\n  )\n\ndat |> \n  summarize(\n    n_visits = n(),\n    .by = person\n  )\n\n# Add row numbers with row_number()\ndat2 <- \n  dat |> \n  select(-visit) |> \n  print()\n\ndat2 |> \n  mutate(\n    visit_total = row_number()\n  )\n\ndat2 |> \n  mutate(\n    visit_person = row_number(),\n    .by = person\n  )\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
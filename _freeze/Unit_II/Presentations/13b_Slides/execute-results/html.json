{
  "hash": "6c365e825bed1e2238e792cadb263c0d",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Foundations of Data Science\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-04-12\"\n    semester: \"Spring 2023\"\n    course: \"399/800\"\n    lecture: \"13b\"\n---\n\n\n::: {.my-title}\n# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}\n\n::: {.my-grey}\n[{{< meta semester >}} | Course {{< meta course >}}]{}<br />\n[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}\n:::\n\n![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n## Roadmap: Automation\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n1. Control Flow\n  \n2. Custom Functions\n\n3. Basic Iteration\n\n4. Activity\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n# Control Flow\n\n## Control Flow {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\nTODO: Missing, fill in\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li usjxhgom trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Control Flow Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlibrary(tidyverse)\n\n# if_else to assign to one of two values conditionally\n\n## simple example\nx <- 6\nif_else(\n  condition = x > 10,\n  true = \"large\",\n  false = \"small\"\n)\n\n## Compressed\nif_else(x > 10, \"large\", \"small\")\n\n## Vectorized\nx <- c(6, 16, 3)\nif_else(x > 10, \"large\", \"small\")\n\n## Nested\nif_else(\n  condition = x > 10,\n  true = \"large\",\n  false = if_else(x > 5, \"medium\", \"small\")\n)\n\n# case_when to assign to one of three+ values conditionally\n\n## simple example\nx <- c(6, 16, 3)\ncase_when(\n  x > 10 ~ \"large\",\n  x > 5 ~ \"medium\",\n  x <= 5 ~ \"small\"\n)\n\n## We can also use `.default =` for when no conditions are met\ncase_when(\n  x > 10 ~ \"large\",\n  x > 5 ~ \"medium\",\n  .default = \"small\"\n)\n\n## Pitfall: ordering the conditions poorly\ncase_when(\n  x > 5 ~ \"medium\", \n  x > 10 ~ \"large\",\n  .default = \"small\"\n)\n\n# Working within mutate: simple examples \n\n## Example data\nsitetemps <- \n  tibble(\n    site = c(2, 1, 2, 3, 3, 3, 1, 1, 2),\n    temp = c(-2.1, 38.6, 4.6, -0.2, 4.5, 0.6, 37.6, 36.7, 102.3)\n  ) |> \n  print()\n\n## if_else within mutate\nsitetemps |> \n  mutate(\n    metric = if_else(\n      condition = site == 1,\n      true = \"F\",\n      false = \"C\"\n    )\n  )\n\n## case_when within mutate\nsitetemps |> \n  mutate(\n    nation = case_when(\n      site == 1 ~ \"US\",\n      site == 2 ~ \"DE\",\n      site == 3 ~ \"FR\",\n      .default = NA\n    )\n  )\n\n# Working within mutate: complex examples\n\n## Boolean logic in condition\nsitetemps |> \n  mutate(\n    metric = if_else(site == 1, \"F\", \"C\"),\n    state = if_else(\n      condition = (metric == \"F\" & temp < 32) | (metric == \"C\" & temp < 0),\n      true = \"solid\",\n      false = \"liquid\"\n    )\n  )\n\n## Conditionally transforming values\nexample |> \n  mutate(\n    metric = if_else(site == 1, \"F\", \"C\"),\n    tempC = if_else(\n      condition = metric == \"F\",\n      true = (temp - 30) * (5 / 9), \n      false = temp\n    ),\n    state = case_when(\n      tempC < 0 ~ \"solid\",\n      tempC < 100 ~ \"liquid\",\n      tempC > 100 ~ \"gas\"\n    )\n  )\n```\n:::\n\n\n\n# Custom Functions\n\n## Custom Functions {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n-   [Functions]{.b .blue} can be created by anyone\n    -   They can reduce repetition, errors, and time\n    -   The DRY (Don't Repeat Yourself) principle\n\n::: {.fragment .mt1}\n-   A function declaration has four parts\n    -   The function **name**\n    -   The **arguments** / input\n    -   The **body** / code\n    -   The **return** / output\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li vlkghpah trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Custom Functions Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## Do it by hand\n\nscore <- rnorm(100, mean = 100, sd = 15)\ndf <- tibble(score)\nggplot(df, aes(x = score)) + \n  geom_histogram()\n\n# Create a function to make a histogram of a vector\n\n## function_name <- function(arguments) { \n##   function_code\n##   print return value\n## }\n## return <- function_name(input)\n\n## Simple version with one argument (vector)\n\nfast_hist <- function(vector) {\n  df <- tibble(x = vector)\n  p <- ggplot(df, aes(x = x)) +\n    geom_histogram()\n  p\n}\nfast_hist(score)\nfast_hist(mpg$hwy)\nfast_hist(starwars$height)\n\n## Fancier version with two arguments (vector and fill_color)\n\nfast_hist <- function(vector, fill_color) {\n  df <- tibble(x = vector)\n  p <- ggplot(df, aes(x = x)) + \n    geom_histogram(fill = fill_color)\n  p\n}\n\nfast_hist(score, fill_color = \"lightblue\")\nfast_hist(score, \"lightblue\")\n\n## Fancier version with default argument for fill_color\n\nfast_hist(score) # error: missing fill_color!\n\nfast_hist <- function(vector, fill_color = \"thistle\") {\n  df <- tibble(x = vector)\n  p <- ggplot(df, aes(x = x)) + \n    geom_histogram(fill = fill_color)\n  p\n}\n\nfast_hist(score)\nfast_hist(score, fill_color = \"lightblue\")\n\n## Fancier version that passes on any extra arguments to the geom via ...\n\nfast_hist(score, fill_color = \"lightblue\", bins = 10) # error: what is bins?\n\n### Quick but rigid fix\nfast_hist <- function(vector, fill_color = \"thistle\", bins = bins) {\n  df <- tibble(x = vector)\n  p <- ggplot(df, aes(x = x)) + \n    geom_histogram(fill = fill_color, bins = bins)\n  p\n}\n\nfast_hist(score, fill_color = \"lightblue\", bins = 10)\n\n### More flexible fix\n\nfast_hist <- function(vector, ...) {\n  df <- tibble(x = vector)\n  p <- ggplot(df, aes(x = x)) + \n    geom_histogram(...)\n  p\n}\n\nfast_hist(score, fill = \"white\", color = \"black\", binwidth = 5)\n```\n:::\n\n\n\n# Basic Iteration\n\n## Basic Iteration {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n-   We often want to repeat any operation many times\n    -   `across()` repeats over many columns\n    -   What about repeating over many files?\n    \n::: {.fragment .mt1}\n-   Some functions can iterate over a vector of files\n    -   e.g., `read_csv()` can combine many files\n    -   We can get a list of files using `list.files()`\n\n:::\n\n::: {.fragment .mt1}\n-   For more flexibility, we make a custom function\n    -   Then we repeat that function using \\{purrr\\}\n    -   We usually use `map()` or `walk()`\n    \n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li krmfspeu trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Basic Iteration Live Coding\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n## Find all files in a folder\nfiles <- list.files(\n  path = \"data\",\n  pattern = \".csv\",\n  full.names = TRUE\n)\nfiles\n\n## Read in and combine all files (must have the same format)\n\nalldata <- read_csv(files, id = \"file\")\nalldata\n\nalldata2 <- \n  alldata |> \n  mutate(\n    pid = str_remove(file, \"data/pid_\"),\n    pid = str_remove(pid, \".csv\")\n  )\nalldata2\n\nggplot(alldata2, aes(x = day, y = mood)) +\n  facet_wrap(~pid) +\n  geom_line()\n\n## Or read in and do something to each file\n\n### Step 1: make a function to do that thing\n\nmake_plot <- function(data_file, ...) {\n  df <- read_csv(data_file, show_col_types = FALSE)\n  \n  pid <- str_remove(data_file, \"data/pid_\")\n  pid <- str_remove(pid, \".csv\")\n  \n  p <- ggplot(df, aes(x = day, y = mood)) +\n    geom_line() +\n    geom_point() +\n    labs(title = str_glue(\"Mood time series for Participant {pid}\"))\n  \n  image_file <- str_glue(\"{pid}_mood.png\")\n  \n  ggsave(file = image_file, plot = p, ...)\n  \n  p\n}\n\n### Step 2: Test that function on one of your files\n\nmake_plot(data_file = \"data/pid_001.csv\", height = 4, width = 6, units = \"in\")\n\n### Step 3: Apply that function to each file using {purrr}\n\n#### Map will capture (and print) the return values in a list object\nmap(.x = files, .f = make_plot, height = 4, width = 6, units = \"in\")\n\n### Walk will run the code but will discard the return values (no print)\nwalk(.x = files, .f = make_plot, height = 4, width = 6, units = \"in\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
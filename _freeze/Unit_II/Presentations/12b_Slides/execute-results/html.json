{
  "hash": "a1af976fdfda387c54f7c80eda774101",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Foundations of Data Science\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-04-05\"\n    semester: \"Spring 2023\"\n    course: \"399/800\"\n    lecture: \"12b\"\n---\n\n\n::: {.my-title}\n# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}\n\n::: {.my-grey}\n[{{< meta semester >}} | Course {{< meta course >}}]{}<br />\n[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}\n:::\n\n![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n## Roadmap\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n1. Highlighting\n  \n2. Layouts\n\n3. Exporting\n\n4. Activity\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n# Highlighting\n\n## Highlighting {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n-   We often want to [emphasize]{.g .blue} a subset of objects\n    -   We could `filter()` these objects out...\n    -   ...and then plot them in a separate plot\n    -   But the context of the others can be helpful\n    \n::: {.fragment .mt1}\n-   To fix this, we can use the \\{gghighlight\\} package\n    -   We add `gghighlight()` to our ggplot\n    -   We give this function criteria for highlighting<br />\n        (just like we would for `filter()`)\n    -   Objects that meet criteria are highlighted\n    -   Objects that don't will \"lose focus\" (e.g., grey)\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li ibavrbsh trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Highlighting Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# HIGHLIGHTING\nlibrary(gghighlight)\n\n## Original plot\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"blue\") +\n  theme_classic()\n\n## Highlighting points\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"blue\") +\n  gghighlight(cyl == 6) +\n  theme_classic()\n\nggplot(mpg, aes(x = displ, y = hwy)) + \n  geom_point(color = \"darkgreen\") +\n  gghighlight(displ < 3) +\n  theme_classic()\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  facet_wrap(~drv) +\n  geom_point() +\n  theme_classic()\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  facet_wrap(~drv) +\n  geom_point() +\n  gghighlight(label_key = drv) +\n  theme_classic()\n# can turn off \"skip labeling\" message with use_direct_label = FALSE\n\n## Highlighting bars\nggplot(iris, aes(Sepal.Length, fill = Species)) +\n  geom_histogram() +\n  theme_classic()\n\nggplot(iris, aes(Sepal.Length, fill = Species)) +\n  geom_histogram() +\n  facet_wrap(~Species) +\n  theme_classic()\n\nggplot(iris, aes(Sepal.Length, fill = Species)) +\n  geom_histogram() +\n  facet_wrap(~Species) +\n  gghighlight(label_key = Species) +\n  theme_classic()\n```\n:::\n\n\n\n# Layouts\n\n## Layouts {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n-   We may want to combine multiple plots into one\n    -   e.g., for communication and publishing\n    -   e.g., to compare/contrast several plots\n    -   e.g., to combine related \"subfigures\"\n    -   e.g., to create complex figure layouts\n\n::: {.fragment .mt1}\n-   To do so, we can use the \\{patchwork\\} package\n    -   This redefines the `+`, `|`, `\\` operators\n    -   We use these to combine ggplot objects\n    -   We can control layout and annotations\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li joeivjls trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Layouts Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n#install.packages(\"patchwork\")\nlibrary(patchwork)\n\n# Create example plots\np1 <- ggplot(mpg, aes(x = displ)) + geom_histogram(bins = 10) + \n  labs(x = \"Engine Displacement\", y = NULL)\np2 <- ggplot(mpg, aes(x = hwy)) + geom_histogram(bins = 10) + \n  labs(x = \"Highway MPG\", y = NULL)\np3 <- ggplot(mpg, aes(x = displ, y = hwy)) + geom_point() +\n  labs(x = \"Engine Displacement\", y = \"Highway MPG\")\np4 <- ggplot(mpg, aes(x = displ, y = hwy)) + geom_smooth() +\n  labs(x = \"Engine Displacement\", y = \"Highway MPG\")\n\n# Combine plots\np1 + p2\n\n# Control the layout\np1 + p2 + plot_layout(ncol = 2)\np1 + p2 + plot_layout(nrow = 2)\n\n# Expand to three plots\np1 + p2 + p3\n\n# Controlling the layout\np1 + p2 + p3 + plot_layout(ncol = 3)\np1 + p2 + p3 + plot_layout(nrow = 3)\np1 + p2 + p3 + plot_layout(ncol = 2, nrow = 2)\n\n# Adding spacers to layout\np1 + p2 + plot_spacer() + p3 + plot_layout(ncol = 2, nrow = 2)\n\np1 + plot_spacer() + p2 + plot_spacer() + p3 + plot_spacer() + \n  plot_layout(ncol = 3, nrow = 2)\n\n# Layout plots side-by-side\np1 | p2\np1 | p2 | p3\n\n# Combine plots above-and-below\np1 / p2\np1 / p2 / p3\n\n# Mix and Match with Parentheses\n(p1 | p2) / p3\n(p1 / p2) | p3\n\n# Use spacers with explicit layout\n(p1 | plot_spacer() | p2) / (plot_spacer() | p3 | plot_spacer())\n\n# Change the relative size of columns/rows\np1 + p3 + p2 + p4 + plot_layout(widths = c(1, 2))\np1 + p2 + p3 + p4 + plot_layout(heights = c(1, 2))\n\n# Add labels to overall plot\n((p1 / p2) | p3) + plot_annotation(\n  title = \"Overall title\",\n  caption = \"Data from fueleconomy.gov\"\n)\n\n# Automated plot annotation\n((p1 / p2) | p3) + plot_annotation(tag_levels = \"a\")\n((p1 / p2) | p3) + plot_annotation(tag_levels = \"1\")\n((p1 / p2) | p3) + plot_annotation(tag_levels = \"a\", tag_suffix = \")\")\n```\n:::\n\n\n\n# Exporting\n\n## Exporting {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n-   `ggsave()` exports ggplots to files\n    -   We control the exact size and format\n    \n::: {.fragment .mt1}\n-   [Raster]{.b .blue} ([png]{.b}, jpg, bmp, tif): Compatibility\n\n    \n::: {.mt1}\n-   [Vector]{.b .blue} ([pdf]{.b}, svg, wmf, eps): Scalability\n:::\n\n![](../../img/formats.png)\n\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li amfaktum trigger=loop delay=3000 colors=primary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Exporting Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\np <- ggplot(mpg, aes(x = displ, y = hwy)) + geom_smooth() +\n  labs(x = \"Engine Displacement\", y = \"Highway MPG\")\np\n\n# Save a specific ggplot object to a file\nggsave(filename = \"pfinal.png\", plot = p)\n\n# Specify the size of the file to save\nggsave(filename = \"pfinal2.png\", plot = p, \n       width = 6, height = 3, units = \"in\")\n#open file and zoom in\n\n# Many file formats are available (raster and vector)\nggsave(filename = \"pfinal2.pdf\", plot = p, \n       width = 6, height = 3, units = \"in\")\n#open file and zoom in\n\n# Creating a very large image may result in small text however\nggsave(filename = \"p_poster.png\", plot = p, \n       width = 12, height = 8, units = \"in\")\n\n# You can quickly increase the text size using theme_*(base_size)\np2 <- p + theme_grey(base_size = 24)\nggsave(filename = \"p_poster2.png\", plot = p2,\n       width = 12, height = 8, units = \"in\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
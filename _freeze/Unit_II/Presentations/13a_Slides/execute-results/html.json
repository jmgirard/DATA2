{
  "hash": "4fdf7d345b7a3ef554cfb5ad00bcdb3a",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    css: ../../styles.css\n    slide-number: true\n    show-slide-number: all\n    progress: true\n    history: true\n    hash-type: number\n    theme: default\n    code-block-background: true\n    highlight-style: zenburn\n    code-link: false\n    code-copy: true\n    controls: true\n    pagetitle: \"Foundations of Data Science\"\n    author-meta: \"Jeffrey Girard\"\n    date-meta: \"2023-04-10\"\n    semester: \"Spring 2023\"\n    course: \"399/800\"\n    lecture: \"13a\"\n---\n\n\n::: {.my-title}\n# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}\n\n::: {.my-grey}\n[{{< meta semester >}} | Course {{< meta course >}}]{}<br />\n[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}\n:::\n\n![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}\n:::\n\n## Roadmap: Special Data Types\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n1. Strings\n  \n2. Factors\n\n3. Dates and Times\n\n4. Activity\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n# Strings\n\n## Strings {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n-   Strings contain text data\n    -   Include quotation marks with `\\\"` \n    -   Add newlines with `\\n` and tabs with `\\t`\n    -   Print string as-is with `writeLines()`\n    \n::: {.fragment .mt1}\n-   \\{stringr\\} (in tidyverse) provides string tools\n    -   Combine, collapse, re-capitalize, etc.\n    -   Subset, remove, replace, etc.\n    -   *Advanced:* detect, extract, count, etc.\n    -   *Advanced:* regular expressions (regex)\n    \n:::\n\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li xqnbvely trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Strings Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\n# Special characters in strings\nstring1 <- \"This is a string\"\nstring2 <- 'To include a \"quote\" in a string I use single quotes'\ndouble_quote <- \"I could also use \\\"quote\\\" to escape the inner quotes\"\ndouble_quote\nwriteLines(double_quote)\n\" \\ \" #the backslash disappears!\n\nliteral_backslash <- \"To include a backslash I escape it as \\\\\"\nliteral_backslash\nwriteLines(literal_backslash)\n\nstring3 <- \"I can include tabs \\t like so and new lines \\n like so\"\nstring3\nwriteLines(string3)\n\n# Combining strings\nlibrary(tidyverse)\nstr_c(\"x\", \"y\")\nstr_c(\"x\", \"y\", \"z\")\nstr_c(\"x\", \"y\", \"z\", sep = \", \")\n\nx <- c(\"Ann\", \"Bob\", \"Charlie\")\nstr_c(x) #doesn't combine when given a vector\nstr_c(x, sep = \" & \") #sep doesn't work for a vector\nstr_c(x, collapse = \" & \") #collapse works for a vector\n\nstr_c(\"prefix_\", c(\"a\", \"b\", \"c\"), \"_suffix\")\nstr_c(\"x\", 1:10)\n\n# Re-capitalizing strings\nx <- c(\"PSYC 800: Foundations of Data Science\")\nstr_to_lower(x)\nstr_to_upper(x)\nstr_to_sentence(x)\nstr_to_title(x)\n\n# Subsetting strings\nx <- c(\"Apple\", \"Banana\", \"Pear\")\nstr_sub(x, start = 1, end = 3)\nstr_sub(x, start = -3, end = -1)\nstr_sub(x, start = 2, end = -2)\nstr_sub(x, start = 1, end = 5) # can go beyond the end\n\n# Removing whitespace from strings\nx <- \"\\t  Sometimes strings have\\n   too   much white space \"\nwriteLines(x)\nstr_trim(x) # remove white space at the start and end\nstr_squish(x) # trim and then collapse inner white space\n\n# Removing and replacing patterns from strings\nx <- \"Scientists very often utilize very fancy words, even when they could utilize simpler ones.\"\nstr_remove(x, pattern = \"very \")\nstr_remove_all(x, pattern = \"very \")\nstr_replace(x, pattern = \"utilize\", replacement = \"use\")\nstr_replace_all(x, pattern = \"utilize\", replacement = \"use\")\nx_clean <- \n  x |> \n  str_remove_all(\"very \") |> \n  str_replace_all(\"utilize\", \"use\")|> \n  print()\n```\n:::\n\n\n\n# Factors\n\n## Factors {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n-   [Factors]{.b .blue} store categorical data\n    -   *Levels* are what's in the data\n    -   *Labels* are names with assign\n\n::: {.fragment .mt1}\n-   There are two main factor types\n    -   *Unordered*, e.g., math, science, or literature\n    -   *Ordered*, e.g., mild, medium, or hot\n:::\n\n::: {.fragment .mt1}\n-   \\{forcats\\} (in tidyverse) provides factor tools\n    -   Reverse, reorder, recode, etc.\n    -   Collapse, lump, drop, etc.\n:::\n\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li cdbgwqyw trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Factors Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nfirst_name <- c(\"Adam\", \"Becky\", \"Chris\", \"Dina\")\nclassroom <- c(2, 1, 1, 2)\nfirst_name\nclassroom\n\nfactor(classroom)\nfactor(classroom, levels = c(1, 2), labels = c(\"Blue\", \"Green\"))\nfactor(classroom, levels = c(2, 1), labels = c(\"Green\", \"Blue\"))\nfactor(classroom, levels = c(1, 2, 3), labels = c(\"Blue\", \"Green\", \"Red\"))\nfactor(classroom, levels = c(1, 2), labels = c(\"Blue\", \"Green\", \"Red\")) #error\n\nclassroom2 <- c(\"Green\", \"Blue\", \"Blue\", \"Green\")\nclassroom2\nfactor(classroom2)\n\nfactor(classroom2, levels = c(\"Blue\", \"Green\", \"Red\"))\nfavsalsa <- c(3, 1, 2, 1)\nfactor(favsalsa, levels = 1:3, labels = c(\"Mild\", \"Medium\", \"Hot\"))\nfactor(favsalsa, levels = 1:3, labels = c(\"Mild\", \"Medium\", \"Hot\"), ordered = TRUE)\n\n# Reversing the order of a factor's levels\ndf <- tibble(\n  name = c(\"Apple\", \"Banana\", \"Pear\"),\n  price = c(1.32, 0.62, 1.52)\n)\n\nggplot(df, aes(x = price, y = name)) + geom_col()\nggplot(df, aes(x = price, y = fct_rev(name))) + geom_col()\n\n# Reordering factor levels by another variable's values\nggplot(df, aes(x = price, y = fct_reorder(name, price))) + geom_col()\n\ngss_cat # comes from forcats package (in tidyverse)\nsummary(gss_cat$relig)\n\nrelig_summary <- \n  gss_cat |> \n  summarize(\n    n = n(),\n    age = mean(age, na.rm = TRUE),\n    tvhours = mean(tvhours, na.rm = TRUE),\n    .by = relig\n  ) |> \n  print()\n\nggplot(relig_summary, aes(x = tvhours, y = relig)) + geom_col()\nrelig_summary |> \n  mutate(relig = fct_reorder(relig, tvhours)) |> \n  ggplot(aes(x = tvhours, y = relig)) + geom_col()\n\n# Recoding factor level names\nlevels(gss_cat$partyid)\nrecoded_party <- \n  gss_cat |> \n  mutate(\n    partyid = fct_recode(\n      partyid,\n      \"Republican, strong\" = \"Strong republican\",\n      \"Republican, weak\" = \"Not str republican\",\n      \"Independent, near rep\" = \"Ind,near rep\",\n      \"Independent, near dem\" = \"Ind,near dem\",\n      \"Democrat, weak\" = \"Not str democrat\",\n      \"Democrat, strong\" = \"Strong democrat\"\n    )\n  )\nlevels(recoded_party$partyid)\n\n# Collapsing factor levels\nlevels(gss_cat$partyid)\ncollapsed_party <- \n  gss_cat |> \n  mutate(\n    partyid = fct_collapse(\n      partyid,\n      other = c(\"No answer\", \"Don't know\", \"Other party\"),\n      rep = c(\"Strong republican\", \"Not str republican\"),\n      ind = c(\"Ind,near rep\", \"Independent\", \"Ind,near dem\"),\n      dem = c(\"Not str democrat\", \"Strong democrat\")\n    )\n  )\nlevels(collapsed_party$partyid)\n```\n:::\n\n\n\n# Dates and Times\n\n## Dates and Times {.smaller}\n\n::: {.columns .pv4}\n\n::: {.column width=\"60%\"}\n-   Different levels of detail are possible\n    -   e.g., Tuesday vs. April 11 vs. 2023-04-11\n    -   e.g., 1pm vs. 1:05pm vs. 13:04:59 US/Central\n    -   e.g., 2023-04-11 13:04:59 US/Central\n    -   Work with the simplest level that meets your needs\n    \n::: {.fragment .mt1}\n-   \\{lubridate\\} and \\{hms\\} provide nice tools\n    -   Parse dates and times from strings\n    -   Extract parts of dates and times\n    -   Create durations, periods, and intervals\n:::\n:::\n\n::: {.column .tc .pv4 width=\"40%\"}\n\n{{< li gphxrzct trigger=loop delay=3000 colors=primary:#2a76dd class=rc >}}\n\n\n:::\n\n:::\n\n## Dates and Times Live Coding\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"false\"}\nlibrary(lubridate)\n\n# Generate current date and date-time\ntoday()\nnow()\n\n# Parse dates from strings and numbers\nymd(\"2017-01-31\")\nmdy(\"January 31st, 2017\")\ndmy(\"31-Jan-2017\")\nymd(20170131)\n\n# Parse date-times from strings\nymd_hms(\"2017-01-31 20:11:59\")\nymd_hms(\"2017-01-31 20:11:59\", tz = \"US/Central\")\nmdy_hm(\"01/31/2017 08:01\")\n\n# Build date-times from components\nlibrary(nycflights13)\nflights |> \n  select(year, month, day, hour, minute)\nflights_dt <- \n  flights |> \n  select(year, month, day, hour, minute) |> \n  mutate(\n    date = make_date(year, month, day),\n    datetime = make_datetime(year, month, day, hour, minute)\n  ) |>  \n  print()\n\n# Extracting components from date-times\ndatetime <- ymd_hms(\"2016-07-08 12:34:56\")\nyear(datetime)\nmonth(datetime)\nmday(datetime)\nyday(datetime)\nwday(datetime)\nmonth(datetime, label = TRUE)\nmonth(datetime, label = TRUE, abbr = FALSE)\nwday(datetime, label = TRUE, abbr = FALSE)\n\nflights_dt |> \n  mutate(weekday = wday(date, label = TRUE)) |> \n  ggplot(aes(x = weekday)) + geom_bar()\n\n# Intervals represent the time span between two dates/datetimes\n# Intervals account for time zones, leap years, etc.\ninterval(start = ymd(19870530), end = today())\ninterval(start = ymd(19870530), end = today()) / days(1)\ninterval(start = ymd(19870530), end = today()) / months(1)\ninterval(start = ymd(19870530), end = today()) / years(1)\ninterval(\n  start = ymd_hms(\"2016-07-08 12:34:56\", tz = \"US/Central\"),\n  end = ymd_hms(\"2016-07-09 12:34:56\", tz = \"US/Eastern\"),\n  tz = \"UTC\"\n)\n\nlibrary(hms)\nparse_hm(\"12:34\")\nparse_hms(\"12:34:59\")\nx <- parse_hms(\"12:34:59.786\")\nx\n\nhour(x)\nminute(x)\nsecond(x)\n\nround_hms(x, digits = 1)\nround_hms(x, digits = 0)\n\nparse_hms(\"12:56:34\") - parse_hms(\"12:34:56\")\ndifftime(parse_hms(\"12:56:34\"), parse_hms(\"12:34:56\"))\ndifftime(parse_hms(\"12:56:34\"), parse_hms(\"12:34:56\"), units = \"secs\")\n```\n:::\n",
    "supporting": [
      "13a_Slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
---
format: 
  revealjs:
    css: ../../styles.css
    slide-number: true
    show-slide-number: all
    progress: true
    history: true
    hash-type: number
    theme: default
    code-block-background: true
    highlight-style: zenburn
    code-link: false
    code-copy: true
    pagetitle: "Foundations of Data Science"
    author-meta: "Jeffrey Girard"
    date-meta: "2023-02-13"
    semester: "Spring 2023"
    course: "399/800"
    lecture: "05a"
---

::: {.my-title}
# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}

::: {.my-grey}
[{{< meta semester >}} | Course {{< meta course >}}]{}<br />
[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}
:::

![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}
:::

## Roadmap: ggplot2 Basics

::: {.columns .pv4}

::: {.column width="60%"}
1. Principles
  
2. Scatterplots

3. Aesthetics

4. Activity
:::

::: {.column .tc .pv4 width="40%"}
{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::

:::

# Principles

## What is a graphic? {.smaller}

::: {.pv4 .tc}
![](../../img/graphics.jpg)

::: {.fragment}
A [data visualization]{.b .blue} expresses [data]{.b .green} through [visual aesthetics]{.b .green}.
:::
:::


## Describing Graphics {.smaller}

::: {.pv4 .tc}

```{r graphics1}
#| layout-ncol: 2
#| fig-height: 8
#| echo: false
#| message: false

library(tidyverse)
mpg2 <- filter(mpg, cyl != 5)

ggplot(mpg2, aes(x = displ, y = hwy)) + 
  geom_point(size = 4) + 
  labs(x = "Engine Size", y = "MPG") + 
  theme_classic(base_size = 36)

ggplot(mpg2, aes(x = factor(cyl), y = hwy)) + 
  stat_summary(geom = "col", fun = mean) + 
  labs(x = "Cylinders", y = "Average MPG") + 
  theme_classic(base_size = 36)
```

::: {.fragment}
Some simple graphics are [easy to describe]{.b .green} and may even have [ready names]{.b .blue}.
:::
:::


## Describing Graphics {.smaller}

::: {.pv4 .tc}

```{r graphics2}
#| layout-ncol: 2
#| fig-height: 8
#| echo: false
#| message: false

library(tidyverse)

ggplot(mpg2, aes(x = displ, y = hwy, color = factor(cyl))) + 
  geom_point(size = 4) + 
  geom_smooth(method = "lm", size = 2) +
  labs(x = "Engine Size", y = "MPG", color = "Cylinders") + 
  theme_grey(base_size = 36) +
  theme(legend.position = "top")

ggplot(mpg2, aes(x = "0", y = hwy)) + 
  facet_wrap(~cyl) +
  geom_violin(size = 1) +
  geom_jitter(size = 3) +
  stat_summary(
    geom = "point", 
    fun = mean, 
    size = 12, 
    color = "red", 
    alpha = 0.8
  ) + 
  scale_x_discrete(position = "top") +
  labs(x = "Cylinders", y = "Average MPG") + 
  theme_grey(base_size = 36) +
  theme(
    axis.ticks.x = element_blank(),
    panel.grid.major.x = element_blank(),
    axis.text.x = element_blank()
  )
```

::: {.fragment}
A [grammar of graphics]{.b .blue} will help us describe more [complex]{.b .green} graphics.
:::
:::


## The Grammar of Graphics {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   The [grammar of graphics]{.b .blue} is a set of rules for [describing]{.b .green} and [creating]{.b .green} data visualizations

::: {.fragment .mt1}
-   To make our data visual (and therefore put our highly evolved occipital lobes to work)...
    -   We connect [variables]{.b .blue} to [visual qualities]{.b .green}
    -   We represent [observations]{.b .blue} as [visual objects]{.b .green}
:::

::: {.fragment .mt1}
-   This requires four *fundamental* elements
    -   We will first learn about them in lecture
    -   We will then apply them in R using \{ggplot2\}
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li ksoxpinm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## Data {.smaller}

::: {.tc .tibbledisp}

```{r mpg}
#| rows.print: 6

mpg
```

::: {.fragment .mt1}
Graphics require [data]{.b .blue} (e.g., tibbles), which describe [observations]{.b .green} using [variables]{.b .green}.
:::
:::


## Aesthetic Mappings {.smaller}

::: {.pv4 .tc}

![](../../img/aes.png)

::: {.fragment}
Graphics require [aesthetic mappings]{.b .blue}, which connect [data variables]{.b .green} to [visual qualities]{.b .green}.
:::
:::


## Scales {.smaller}

::: {.pv4 .tc}

::: {layout-ncol=2}
![](../../img/position.png)

![](../../img/otherscale.png)
:::

::: {.fragment .mt1}
Graphics require [scales]{.b .blue}, which connect specific [data *values*]{.b .green} to specific [aesthetic *values*]{.b .green}.
:::
:::


## Geometric Objects {.smaller}

::: {.pv4 .tc}

```{r geoms}
#| layout-ncol: 2
#| fig-height: 8
#| echo: false
#| message: false

ggplot(mpg2, aes(x = displ, y = hwy)) + 
  geom_point(size = 4) + 
  labs(x = "Engine Size", y = "MPG") + 
  theme_grey(base_size = 36)

ggplot(mpg2, aes(x = factor(cyl), y = hwy)) + 
  stat_summary(geom = "col", fun = mean) + 
  labs(x = "Cylinders", y = "Average MPG") + 
  theme_grey(base_size = 36)
```

::: {.fragment .mt1}
Graphics require [geometric objects]{.b .blue} (geoms), which [represent the observations]{.b .green}.
:::
:::


# Scatterplots

## ggplot2 Basics {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   The [ggplot2]{.b .blue} package is a part of tidyverse
    -   No need to install or load it separately
    -   It plays nicely with tibbles and wrangling

::: {.fragment .mt1}
-   It implements the [grammar of graphics]{.b .green} in R
    -   The "gg" stands for "grammar of graphics"
    -   Thus, it lets us control all four elements
:::

::: {.fragment .mt1}
-   We will create a [pseudo-pipeline]{.b .green} of commands
    -   However, we will use `+` rather than `|>`
    -   This is because \{ggplot2\} predates the R pipe
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li gkeohday trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## ggplot2 Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: We will need tidyverse and an example dataset

library(tidyverse)

mpg

# ==============================================================================

# LESSON: First, set the data to a tibble
p <- ggplot(data = mpg)
p

# ==============================================================================

# LESSON: Next, set the aesthetic mappings with aes()

p <- ggplot(data = mpg, mapping = aes(x = displ, y = hwy))
p

# ==============================================================================

# TIP: You can leave off the optional argument names

p <- ggplot(mpg, aes(x = displ, y = hwy))
p

# ==============================================================================

# LESSON: Finally, add a point geom

p <- 
  ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point()
p

# ==============================================================================

# LESSON: We can use arguments to customize the geom

p <- 
  ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(color = "grey40", shape = "square", size = 2)
p

# ==============================================================================

# LESSON: We now have a simple scatterplot but can add more geom layers

p <- 
  ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(color = "grey40", shape = "square", size = 2) +
  geom_smooth()
p

# ==============================================================================

# LESSON: We now have a simple scatterplot but can add more geom layers

p <- 
  ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(color = "grey40", shape = "square", size = 2) +
  geom_smooth(color = "red", linetype = "dashed", linewidth = 1)
p
```


# Aesthetics

## Aesthetics {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Aesthetics]{.b .blue} control a geom's appearance
    -   points: *color, shape, size, ...*
    -   smooths: *color, linetype, linewidth, ...*

::: {.fragment .mt1}
-   There are two ways to control aesthetics:
    -   You can [set it]{.b .blue} to a [value]{.b .green}
        -   It will take on *one* value only
        -   e.g., all points = red
    -   You can [map it]{.b .blue} to a [variable]{.b .green}
        -   It will take on *different* values
        -   e.g., sedans = red, trucks = blue

:::

:::

::: {.column .tc .pv5 width="40%"}
{{< li fiivuxdi trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## Aesthetics Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: We will need tidyverse and an example dataset

library(tidyverse)

mpg

# ==============================================================================

# LESSON: Set the color aesthetic to a value

p <- 
  ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(color = "blue")
p

# ==============================================================================

# LESSON: Map the color aesthetic to a variable to learn more relationships

p <- 
  ggplot(mpg, aes(x = displ, y = hwy, color = class)) + 
  geom_point()
p

# ==============================================================================

# PITFALL: Be sure to set aesthetics inside of geom() not aes()

p <- ggplot(mpg, aes(x = displ, y = hwy, color = "blue")) + 
  geom_point() #unintended
p

# ==============================================================================

# PITFALL: If you both set and map an aesthetic, the setting will win out

ggplot(mpg, aes(x = displ, y = hwy, color = drv)) + 
  geom_point(color = "blue") 

# ==============================================================================

# LESSON: This works the same for other aesthetics

ggplot(mpg, aes(x = displ, y = hwy, shape = drv)) + 
  geom_point() 

# ==============================================================================

# TIP: I like to use redundant aesthetics (e.g., in case color can't be seen)

ggplot(mpg, aes(x = displ, y = hwy, color = drv, shape = drv)) + 
  geom_point() 

# ==============================================================================

# LESSON: Some geoms will be "grouped" if you map to a categorical variable

ggplot(mpg, aes(x = displ, y = hwy, color = drv, shape = drv)) + 
  geom_point() +
  geom_smooth()

# NOTE: We now have a separate smooth line for each drv category
# NOTE: The shape aesthetic does not apply to smooth geoms so was ignored there
```

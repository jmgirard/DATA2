---
format: 
  revealjs:
    css: ../../styles.css
    slide-number: true
    show-slide-number: all
    progress: true
    history: true
    hash-type: number
    theme: default
    code-block-background: true
    highlight-style: zenburn
    code-link: false
    code-copy: true
    pagetitle: "Foundations of Data Science"
    author-meta: "Jeffrey Girard"
    date-meta: "2023-02-08"
    semester: "Spring 2023"
    course: "399/800"
    lecture: "04b"
---

::: {.my-title}
# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}

::: {.my-grey}
[{{< meta semester >}} | Course {{< meta course >}}]{}<br />
[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}
:::

![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}
:::

## Roadmap: dplyr Basics

::: {.columns .pv4}

::: {.column width="60%"}
1. Column verbs
  
2. Row verbs

3. Pipelines

4. Activity
:::

::: {.column .tc .pv4 width="40%"}
{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::

:::

# Column verbs

## Basic wrangling verbs {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [tidyverse]{.b .blue} provides tools for wrangling tibbles
    -   These functions are named after *verbs*
    -   So if you name your objects after *nouns*...
    -   ...your code becomes easier to read

::: {.fragment .mt1}
| Noun(noun) ❌        |  Verb(noun)  ✔️  | 
|:----------------------|:----------------|
| `blender(fruit)`      | `blend(fruit)`  |
| `screwdriver(screw)`  | `drive(screw)`  |
| `boxcutter(box)`      | `cut(box)`      |

:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li sbiheqdr trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## Column-focused verbs {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Select]{.b .blue} retains only certain columns/variables
    -   [`select(TBL, VAR_KEEP, -VAR_DROP)`]{.f3}

::: {.fragment .mt1}
-   [Mutate]{.b .blue} adds or transforms columns/variables
    -   [`mutate(TBL, NEW_VAR = OLD_VAR / 1000)`]{.f3}
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li ifxlrnhk trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## *Select* Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: Load package and inspect example tibble

library(tidyverse) # includes the dplyr package
starwars

# ==============================================================================

# USECASE: Retain only the specified variables

sw <- select(starwars, name)
sw
sw <- select(starwars, name, sex, species)
sw

# ==============================================================================

# PITFALL: Don't forget to save the change with assignment

select(starwars, name, sex, species)
starwars # still includes all variables

# ==============================================================================

# USECASE: Retain all variables between two variables

sw <- select(starwars, name, hair_color:eye_color)
sw

# ==============================================================================

# USECASE: Retain all variables except the specified ones

sw <- select(starwars, -sex, -species)
sw
sw <- select(starwars, -c(sex, species))
sw
sw <- select(starwars, -c(hair_color:starships))
sw
```


## *Mutate* Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: Create example tibble

patients <- tibble(
  id = c("S1", "S2", "S3"),
  feet = c(6, 5, 5),
  inches = c(1, 7, 2),
  pounds = c(176.3, 124.9, 162.6)
)
patients

# ==============================================================================

# USECASE: Add one or more variables

p2 <- mutate(patients, sex = c("M", "F", "F"))
p2

ages <- c(32, 41, 29)
p2 <- mutate(patients, ages = ages)
p2

p2 <- mutate(
  patients, 
  sex = c("M", "F", "F"), 
  ages = ages
)
p2

# ==============================================================================

# USECASE: Compute variables

p2 <- mutate(patients, height = feet + inches / 12)
p2

p2 <- mutate(patients, ln_pounds = log(pounds))
p2

# ==============================================================================

# USECASE: Overwrite variables

patients <- mutate(patients, height = height / 3.281)
patients

# ==============================================================================

# USECASE: Duplicate variables

p2 <- mutate(patients, weight = pounds)
p2 # both weight and pounds exist
```


# Row verbs

## Row-focused verbs {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Arrange]{.b .blue} sorts rows based on their values
    -   [`arrange(TBL, VAR_SORT_UP)`]{.f3}
    -   [`arrange(TBL, desc(VAR_SORT_DOWN))`]{.f3}
    -   [`arrange(TBL, VAR_SORT_1ST, VAR_SORT_2ND)`]{.f3}

::: {.fragment .mt1}
-   [Filter]{.b .blue} retains certain rows based on criteria
    -   [`filter(TBL, NUM_CRIT > 0)`]{.f3}
    -   [`filter(TBL, STR_CRIT == "A")`]{.f3}
    -   [`filter(TBL, CRIT1, CRIT2)`]{.f3}
:::

:::

::: {.column .tc .pv5 width="40%"}
{{< li dlprbpnx trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## *Arrange* Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# USECASE: Sort observations by a variable

starwars

sw <- arrange(starwars, height)
sw # sorted by height, ascending

sw <- arrange(starwars, name)
sw # sorted by name, alphabetically

# ==============================================================================

# USECASE: Sort observations by a variable, in reverse order

sw <- arrange(starwars, desc(height))
sw # sorted by height, descending

sw <- arrange(starwars, desc(name))
sw # sorted by name, reverse-alphabetically

# ==============================================================================

# USECASE: Sort observations by multiple variables

sw <- arrange(starwars, hair_color, mass)
sw # sorted by hair_color, then ties broken by mass
```


## *Filter* Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# USECASE: Retain only observations that meet a criterion

sw <- filter(starwars, mass > 100)
sw # only observations with mass greater than 100

sw <- filter(starwars, mass <= 100)
sw # only observations with mass less than or equal to 100

sw <- filter(starwars, species == "Human")
sw # only observations with species equal to Human

sw <- filter(starwars, species != "Human")
sw # only observations with species not equal to Human

# ==============================================================================

# PITFALL: Don't try to use a single = for testing equality

sw <- filter(starwars, height = 150) # error

sw <- filter(starwars, height == 150) # correct
sw 

# ==============================================================================

# PITFALL: Don't forget that R is case-sensitive

sw <- filter(starwars, species == "human")
sw # no observations left (because it should be Human)

# ==============================================================================

# USECASE: Retain only observations that meet complex criteria

sw <- filter(starwars, mass > 100 & height > 200)
sw # only observations with mass over 100 AND height over 200

sw <- filter(starwars, height < 100 | hair_color == "none")
sw # only observations with height under 100 OR hair_color equal to none

# ==============================================================================

# PITFALL: Don't forget to complete both conditions

sw <- filter(starwars, mass > 100 & < 200) # error

sw <- filter(starwars, mass > 100 & mass < 200) # correct
sw

# ==============================================================================

# PITFALL: Don't try to equate a string to a vector

sw <- filter(starwars, species == c("Human", "Droid")) # error

sw <- filter(starwars, species %in% c("Human", "Droid")) # correct
sw
```


## *Filter* Cheatsheet {.smaller}

::: {.columns .pv4}
::: {.column width="60%" .mytable}

| Symbol | Description            | Num | Chr   |
|--------|------------------------|-----|-------|
| `<`    | Less than              | Yes | *No*  |
| `<=`   | Less than or equal to  | Yes | *No*  |
| `>`    | More than              | Yes | *No*  |
| `>=`   | More than or equal to  | Yes | *No*  |
| `==`   | Equal to               | Yes | Yes   |
| `!=`   | Not equal to           | Yes | Yes   |
| `%in%` | Found in               | Yes | Yes   |
| `&`    | Logical And            | Yes | Yes   |
| `|`    | Logical Or             | Yes | Yes   |

:::

::: {.column .tc .pv5 width="40%"}
{{< li esixrdij trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::


# Pipelines

## Pipes and Pipelines {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
- How can we do [multiple operations]{.b .green} to an object?
    1. `x <- 10`
    2. `x2 <- sqrt(x)`
    3. `x3 <- round(x2)`
    
::: {.fragment .mt1}
- This works but is **cumbersome** and **error-prone**
:::

::: {.fragment .mt1}
- A better approach is to use [pipes]{.b .blue} and [pipelines]{.b .green}
    - `x3 <- 10 |> sqrt() |> round()`
:::

::: {.fragment .mt1}
- I like to read `|>` as "and then..."
    - "Take 10 and then sqrt() and then round()"
:::
    
:::

::: {.column .tc .pv5 width="40%"}
{{< li mhttdvjl trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::


## Pipes Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: Enable the pipe operator shortcut

# Tools > Global Options... > Code tab > Check "Use Native Pipe Operator"

# Type out |> or press Ctrl+Shift+M (Win) / Cmd+Shift+M (Mac)

# ==============================================================================

# LESSON: The pipe pushes objects to a function as its first argument

# TEMPLATE: x |> function_name() is the same as function_name(x)

x <- 10

y <- sqrt(x)
y

y <- x |> sqrt()
y

# ==============================================================================

# PITFALL: Don't forget to remove the object from the function call

x |> sqrt(x) # wrong

x |> sqrt() # correct

# ==============================================================================

# USECASE: You can still use arguments when piping

z <- round(3.14, digits = 1)
z

z <- 3.14 |> round(digits = 1)
z

# ==============================================================================

# USECASE: Pipes are useful with tibbles and wrangling verbs

starwars

sw <- select(starwars, name, species, height)
sw

sw <- starwars |> select(name, species, height)
sw

# ==============================================================================

# PITFALL: Don't add a pipe without a step after it

sw <- starwars |> select(name, species, height) |> # error
```


## Pipelines Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# USECASE: You can chain multiple pipes together to make a pipeline

x <- 10 |> sqrt() |> round()
x

# ==============================================================================

# TIP: If you want to see the output of a pipeline, you can pipe to print()

x <- 10 |> sqrt() |> round() |> print()

# ==============================================================================

# TIP: To make your pipelines more readable, move each step to a new line

x <- 
  10 |> 
  sqrt() |> 
  round() |>
  print()

# ==============================================================================

# PITFALL: Don't put the pipe at the beginning of a line, though

x <- 
  10 
  |> sqrt()
  |> round()
  |> print() # error

# ==============================================================================

# USECASE: Chain together a series of verbs to flexibly wrangle data

tallones <- 
  starwars |> 
  select(name, species, height) |> 
  mutate(height_ft = height / 30.48) |>  
  filter(height_ft > 7) |> 
  arrange(desc(height_ft)) |>  
  print()
```

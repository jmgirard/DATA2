---
format: 
  revealjs:
    css: ../../styles.css
    slide-number: true
    show-slide-number: all
    progress: true
    history: true
    hash-type: number
    theme: default
    code-block-background: true
    highlight-style: zenburn
    code-link: false
    code-copy: true
    pagetitle: "Foundations of Data Science"
    author-meta: "Jeffrey Girard"
    date-meta: "2023-01-30"
    semester: "Spring 2023"
    course: "399/800"
    lecture: "03a"
---

::: {.my-title}
# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}

::: {.my-grey}
[{{< meta semester >}} | Course {{< meta course >}}]{}<br />
[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}
:::

![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}
:::

## Roadmap: Basic Programming

::: {.columns .pv4}

::: {.column width="60%"}
1. Assignment
  
2. Naming

3. Functions

4. Activity
:::

::: {.column .tc .pv4 width="40%"}
{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::

:::

# Assignment

## Assignment {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   It is often useful to store data in [named objects]{.b .green}
    -   This makes the data easier to use and re-use
    -   This makes the code easier to write and read

::: {.fragment .mt1}
-   Which command is easier to follow?
    1.  Dial *7 8 5 8 6 4 0 8 4 1*
    2.  Call *Office Phone*
:::

::: {.fragment .mt1}
-   Named objects are created using [assignment]{.b .blue}
    -   Give a **name** then an **arrow** then the **data**
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li mgtgkkcb trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}

::: {.fragment}
`office <- 7858640841`
:::
:::
:::

## Assignment Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# LESSON: Assigning and printing

x <- 2
x

# ==============================================================================

# USECASE: Using an object in math (a la algebra) 

x * 4

2 * 4

# ==============================================================================

# LESSON: You must use assignment to update an object

x

x + 1

x # still 2

x <- x + 1
x # updated to 3

# ==============================================================================

# USECASE: We can use the same object multiple times in a line

(10 + x - 1) / x

# ==============================================================================

# USECASE: We can also use an object to create another object

y <- 10 + x
y

# ==============================================================================

# USECASE: We can also use multiple objects in a line

y / x
```

# Naming

## Naming {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   Object names can [only include]{.b .blue}:
    -   Letters: `a-Z`
    -   Numbers: `0-9`
    -   Underscores: `_`
    -   Periods: `.`

::: {.fragment .mt1}
-   Additional Rules:
    -   Must [start with a letter or period]{.b .blue}
    -   Cannot contain spaces or dashes
    -   Cannot contain other symbols
    -   Names are case-sensitive (`age` â‰  `Age`)
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li efdggetp trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::
:::

## Naming Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# LESSON: Good names are a balancing act

x <- 93 # what is it?

rate <- 93 # too short

heart_rate_in_beats_per_minute <- 93 # too long

heart_rate_bpm <- 93 # just right

# ==============================================================================

# PITFALL: Don't try to include spaces or dashes in names

heart rate <- 93 # error

heart-rate <- 93 # error

# ==============================================================================

# PITFALL: Don't try to include special symbols

age@time2 <- 12 # error

age_time2 <- 12 # correct

# ==============================================================================

# PITFALL: Don't try to put a number or underscore first

heart_rate_1 <- 93 # correct

1_heart_rate <- 93 # error

_heart_rate <- 93 # error

# ==============================================================================

# LESSON: Object names are case-sensitive

heart_rate <- 93

Heart_rate <- 88

heart_rate # still 93

Heart_rate # a new object
```

# Functions

## Functions {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Recipes]{.b .green} allow chefs to cook up tasty treats
    -   Recipes call for ingredients
    -   Recipes involve one or more steps
    -   Steps transform ingredients into treats

::: {.fragment .mt1}
-   [Functions]{.b .blue} are like *customizable* recipes
    -   Functions call for inputs ("arguments")
    -   Functions involve one or more lines of code
    -   Code transforms inputs into outputs
    -   Using functions requires parentheses (usually)
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li vpqdjfdy trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}

::: {.fragment}
`out <- f(in1, in2)`
:::
:::
:::

## Functions Live Coding

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

# USECASE: Function can perform a task more easily and readably

# TEMPLATE: output <- function_name(input)

9 ^ (1 / 2)

x <- sqrt(9)
x

# ==============================================================================

# LESSON: We can also use functions to transform objects

y <- 9

sqrt(y)

# ==============================================================================

# LESSON: We can even use functions to transform the result of calculations

2 / 3

round(2 / 3)

# ==============================================================================

# LESSON: We can customize what a function does using arguments

# TEMPLATE: output <- function_name(argument, argument_name = argument_value)

round(2 / 3, digits = 2)

round(2 / 3, digits = 3)

# ==============================================================================

# LESSON: Some arguments are optional because they have default values

round(2 / 3) # the default value for digits is 0

round(2 / 3, digits = 0)
```

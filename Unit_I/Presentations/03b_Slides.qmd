---
format: 
  revealjs:
    css: ../../styles.css
    slide-number: true
    show-slide-number: all
    progress: true
    history: true
    hash-type: number
    theme: default
    code-block-background: true
    highlight-style: zenburn
    code-link: false
    code-copy: true
    controls: true
    pagetitle: "Foundations of Data Science"
    author-meta: "Jeffrey Girard"
    date-meta: "2023-02-01"
    semester: "Spring 2023"
    course: "399/800"
    lecture: "03b"
---

::: {.my-title}
# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}

::: {.my-grey}
[{{< meta semester >}} | Course {{< meta course >}}]{}<br />
[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}
:::

![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}
:::

## Roadmap: More Programming

::: {.columns .pv4}

::: {.column width="60%"}
1. Vectors
  
2. Strings

3. Packages

4. Activity
:::

::: {.column .tc .pv4 width="40%"}
{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::

:::

# Vectors

## Vectors {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Vectors]{.b .blue} combine similar objects into a collection
    -   *I like to imagine a train pulling multiple cars*<br />
    ![](../../img/traincar.png)
    -   A vector is one object with many sub-objects
    -   We refer to each sub-object as an [element]{.b .green}

::: {.fragment .mt1}
-   Some functions [transform each element]{.b .green} in turn
    -   *Double the amount of cargo in every train car*
:::

::: {.fragment .mt1}
-   Some functions [summarize across elements]{.b .green}
    -   *Calculate the total cargo across all train cars*
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li bqmoqptv trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}

::: {.fragment}
`v <- c(1, 2, 3)`
:::

:::
:::


## Vectors Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# LESSON: We can combine multiple elements into a vector

# TEMPLATE: vector_name <- c(element1, element2, element3)

x <- 4 9 16 25 # error

x <- c(4, 9, 16, 25)
x

y <- c(2, 3)
y

# ==============================================================================

# LESSON: We can also combine multiple vectors and elements

c(x, y)

c(x, y, 20)

# ==============================================================================

# USECASE: Math operators will transform each element individually

x + 1

x * 3

x # but again, this won't be saved unless you use assignment

# ==============================================================================

# USECASE: Some functions will also transform each element individually

sqrt(x)

log(x)

# ==============================================================================

# USECASE: Other functions will summarize the vector with a single number

length(x)

sum(x)

mean(x)

average(x) # error
```

# Strings

## Strings {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   When talking to R, we need a way to distinguish
    -   Object/function names (e.g., the *mean* function)
    -   Text/character data (e.g., the word *mean*)
    
::: {.fragment .mt1}
-   [Strings]{.b .blue} are R's way of storing text data
    -   Strings can store any characters (no rules!)
    -   Strings are created and displayed with [quotes]{.b .green}
:::
::: {.fragment .mt1}
-   R has great tools for working with strings
    -   Strings can be collected into vectors
    -   Special functions can transform strings
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li xqnbvely trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}

::: {.fragment}
`name <- "John Doe"`
:::

:::
:::

## Strings Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# USECASE: Strings are the main way to store character data in R
 
my_color <- red # error

my_color <- "red" # correct

# ==============================================================================

# USECASE: Strings can also store symbols not allowed in object names

dye <- "red#40"
dye

dyes <- c("red#40", "blue#02")
dyes

# ==============================================================================

# PITFALL: Many operations you can do to numbers won't work for strings

dyes + 1 # error

mean(dyes) # error

# ==============================================================================

# USECASE: But other operations work for both or even just for strings

length(dyes)

nchar(dyes)

dyes2 <- toupper(dyes)
dyes2
```

# Packages

## Packages {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Cookbooks]{.b .green} are a great way to learn to cook
    -   *They contain lots of recipes and instructions*
    -   Browse an online **bookstore** for a cookbook
    -   **Order** it to add it to your personal **bookshelf**
    -   To use, **pull** the cookbook off the shelf

::: {.fragment .mt1}
-   [Packages]{.b .blue} are like cookbooks for R
    -   *They contain helpful functions and datasets*
    -   Browse an online **repository** for a package
    -   **Install** it to add it to your personal **library**
    -   To use, **load** the package from the library
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li tboujdsn trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}

::: {.fragment}
`library("pkg_name")`
:::
:::
:::

## Packages Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# USECASE: The stringr package adds a function to fix capitalization

students <- c("mary anne", "BENjamin", "Lee")

# ==============================================================================

# PITFALL: But we can't use that function without installing the package

str_to_title(students) # error

# ==============================================================================

# LESSON: Installing a package using RStudio

# - RStudio > Extras pane > Packages tab > Install button

install.packages("stringr")

# PITFALL: Use this command in the console, not in your Quarto document!

# ==============================================================================

# PITFALL: We also need to load the package before we can use it

str_to_title(students) # error

# ==============================================================================

# LESSON: We load the package using library()

library("stringr")
str_to_title(students) # finally works!

# ==============================================================================

# LESSON: We can also keep our packages updated using RStudio

# RStudio > Extras pane > Packages tab > Update button

# ==============================================================================

# USECASE: We can see if a package contains any vignettes (articles)

browseVignettes("stringr")
```

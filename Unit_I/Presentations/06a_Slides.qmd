---
format: 
  revealjs:
    css: ../../styles.css
    slide-number: true
    show-slide-number: all
    progress: true
    history: true
    hash-type: number
    theme: default
    code-block-background: true
    highlight-style: zenburn
    code-link: false
    code-copy: true
    controls: true
    pagetitle: "Foundations of Data Science"
    author-meta: "Jeffrey Girard"
    date-meta: "2023-02-20"
    semester: "Spring 2023"
    course: "399/800"
    lecture: "06a"
---

::: {.my-title}
# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}

::: {.my-grey}
[{{< meta semester >}} | Course {{< meta course >}}]{}<br />
[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}
:::

![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}
:::


## Roadmap

::: {.columns .pv4}

::: {.column width="60%"}
1. Code Style
  
2. Chunk Options

3. More Quarto

4. Activity
:::

::: {.column .tc .pv4 width="40%"}
{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::

:::

# Code Style

## Code Style {.smaller}

::: {.columns .pv4}

::: {.column width="60%"}
- Style describes *optional* changes

  - e.g., how to name files and objects
  
  - e.g., where to add spaces and line breaks

::: {.fragment .mt1}
- There is no "right" or "wrong" with style
:::

::: {.fragment .mt1}
- But using a consistent code style has benefits

  - Code becomes more readable and predictable
  
  - Collaboration becomes easier and smoother
:::

::: {.fragment .mt1}
- We will learn about the [tidyverse style guide](https://style.tidyverse.org)
:::
:::

::: {.column .tc .pv4 width="40%"}
{{< li kcvtxype trigger=loop delay=5000 colors=primary:#2a76dd class=rc >}}
:::

:::


## File Names {.smaller}

- File names should be [meaningful]{.b .blue} and [clear]{.b .blue}

  -   [`models.qmd`]{.danger} ➔ `dissertation_study2_models.qmd`

::: {.fragment .mt1}
- [Avoid special characters]{.b .blue} in names (arguably this includes spaces)

  -   [`M@$teR$ Th3s1s.r`]{.danger} ➔ `masters_thesis.R`
:::

::: {.fragment .mt1}
- If you files need to be run in order, [prefix with numbers]{.b .blue}

  -   `1_import.qmd`, `2_model.qmd`, `3_visualize.qmd`
:::

::: {.fragment .mt1}
- Use [zero-padding]{.b .blue} as necessary (to sort them properly)

  -   `01_download.qmd`, `02_tidy.qmd`, ..., `10_visualize.qmd`
:::


## Sectioning and Comments {.smaller}

- Use [sections and subsections]{.b .blue} to give the file internal structure

- Load [all packages together]{.b .blue} at the top of the document

- Use [comments to explain]{.b .blue} the "why" (not the "what" or "how")

::: {.fragment}
```{r}
#| eval: false
#| echo: true

# Load Packages ------------------------------------------------------
library(tidyverse)
library(easystats)

# Prepare Data -------------------------------------------------------

## Import Data
raw_data <- read_csv("example.csv", na = "-999") # Set -999 as missing

## Tidy Data
tidy_data <- 
  raw_data |> 
  select(id, group, score) |> # Drop unused variables
  mutate(score = score / 100) # Rescale from 0-100 to 0-1

# Fit Models ---------------------------------------------------------
fit <- lm(score ~ group, data = tidy_data) # Compare groups' scores
model_parameters(fit)
model_performance(fit)
```
:::


## Object Naming {.smaller}

- Object names should use a single and [consistent style]{.b .blue}
  - [`countydata` and `plot_county`]{.danger}
  - **Snake Case:** `county_data` and `county_plot`
  - **Camel Case:** `countyData` and `countyPlot`

::: {.fragment .mt1}
- Use brief, descriptive [noun phrases]{.b .blue} for object names
  - [`x`]{.danger} ➔ `heart_rate`
  - [`df`]{.danger} ➔ `aim1_data`
:::

::: {.fragment .mt1}
- [Avoid reusing names]{.b .blue} of base R objects and functions
  - e.g., [`F`, `T`, `c`, `mean`, `sum`, `pi`, `data`]{.danger}
:::


## Spacing {.smaller}

- Put spaces [around most operators]{.b .blue} (arithmetic, relational, and logical)
  - [`1/2+3*4-5`]{.danger} ➔  `1 / 2 + 3 * 4 - 5`
  - [`a>3&b<=0`]{.danger} ➔ `a > 3 & b <= 0`

::: {.fragment .mt1}
- But don't put spaces [around "high priority" operators]{.b .green}
  - [`5 ^ 2`]{.danger} ➔ `5^2`
  - [`( 1 + 2 ) * 3`]{.danger} ➔ `(1 + 2) * 3`
  - [`sum ( sales )`]{.danger} ➔ `sum(sales)`
  - [`df $ variable`]{.danger} ➔ `df$variable`
:::

::: {.fragment .mt1}
- Always put a space [after a comma]{.b .blue} but never before a comma
  - [`c(1 ,2,3 ,4, 5)`]{.danger} ➔ `c(1, 2, 3, 4, 5)`
:::


## Argument Specification {.smaller}

- Function arguments usually either provide [data]{.b .green} or customize [details]{.b .blue}
  - e.g., the `round()` function has two arguments:
  - `x` contains the number(s) to be rounded (a [data]{.b .green} argument)
  - `digits` contains the number of digits to round to (a [details]{.b .blue} argument)

::: {.fragment .mt1}
- In a function call, [omit]{.b .green} (i.e., remove) the names of [data]{.b .green} arguments
  - e.g., omit `x = `
:::

::: {.fragment .mt1}
- In a function call, [include]{.b .blue} the full names of [detail]{.b .blue} arguments
  - e.g., include `details = `
:::

::: {.fragment .mt1}
- [`round(x = 2 / 3, digits = 1)`]{.danger} ➔ `round(2 / 3, digits = 1)`
:::


## Line Length and Indents {.smaller}

- Strive to limit your code to just **80 characters per line**
  - RStudio can show you a vertical line at 80 characters:<br />
    *Tools > Global Options > Code > Display > Show Margin (Column=80)*

::: {.fragment .mt1}
- If a line is longer than 80 characters, [break it up]{.b .blue} and [align it]{.b .green}
  - Put each argument on a separate, indented line
  - Align the indenting of opening and closing lines
:::

::: {.fragment .mt1}
```{r}
#| eval: false
#| echo: true

# Too long!
do_something_very_complicated("that", requires, many, arguments, "some of which may be long")

# Much better!
do_something_very_complicated(
  something = "that",
  requires = many,
  arguments = "some of which may be long"
)
```
:::


## Pipes and Pipelines {.smaller}

- Line break and [indent after assignment]{.b .blue}

- Follow each pipe with a [line break]{.b .blue}

- [Separate long lines]{.b .blue} of arguments with line breaks

- [Indent further]{.b .blue} for arguments

- [Align the indenting]{.b .blue} of opening and closing lines

```{r}
#| eval: false
#| echo: true

# Hard to read!
x <- df |> step_one(arg = TRUE) |> step_two(arg1 = 1, arg2 = 2, arg3 = 3) |> step_three()

## Easier to read!
x <- 
  df |> 
  step_one(arg = TRUE) |> 
  step_two(
    arg1 = 1,
    arg2 = 2,
    arg3 = 3
  ) |> 
  step_three()
```


# Chunk Options

## Chunk Options {.smaller}

::: {.columns .pv4}

::: {.column width="60%"}
- The YAML header customizes our document
  - e.g., setting the `author:` or `format:` fields

::: {.fragment .mt1}
- YAML can also customize each code chunk
  - We add a special comment to the top of it
  - The syntax we use is called the "hash pipe"<br />
  `#| field: value`
:::

::: {.fragment .mt1}
- We can also give each chunk a unique name
  - This is helpful when troubleshooting
  - It also helps when caching results
:::

:::


::: {.column .tc .pv4 width="40%"}
{{< li iyeyavvi trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::

:::

## Chunk Options Live Coding

{{< include _06a_Chunk_Options.qmd >}}


# More Quarto

## Equations {.smaller}

- Math equations can be added to Quarto documents using [MathJax](https://www.mathjax.org/)
  - Wrap the MathJax equation with `$` for *inline* (compressed) mode
  - Wrap the MathJax equation with `$$` for *display* (expanded) mode
  - This can only be done in Markdown (outside of any R chunk)

::: {.fragment .mt1}
- `$\bar{x} = \frac{1}{n} \sum_{i=1}^{n} x_{i}$`<br />
$\bar{x} = \frac{1}{n} \sum_{i=1}^{n} x_{i}$
:::

::: {.fragment .mt1}
- `$$\bar{x} = \frac{1}{n} \sum_{i=1}^{n} x_{i}$$`<br />
$$\bar{x} = \frac{1}{n} \sum_{i=1}^{n} x_{i}$$
:::

## Extensions and Videos {.smaller}

- Quarto has an [extension system](https://quarto.org/docs/extensions/) that lets you add features via "shortcodes"

  - e.g., I made an extension to [embed animated icons](https://github.com/jmgirard/lordicon) in documents

  - There is also an extension to [embed video files](https://quarto.org/docs/authoring/videos.html) in documents

::: {.fragment .mt1}
- To embed a video in a Quarto document, use the video shortcode outside a chunk

  - `{{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}}`

::: {.tc}
{{< video https://www.youtube.com/embed/wo9vZccmqwc width="400" height="250" >}}
:::

:::


## Embedding Resources {.smaller}

- HTML documents have many resources (e.g., images, stylesheets, JavaScript)

::: {.fragment .mt1}
- These are saved in a `_files` directory by default
  - When you render `x.qmd`, Quarto creates `x.html` and `x_files/`
:::

::: {.fragment .mt1}
- To view your `x.html` file correctly, others need `x_files/` too!
:::

::: {.fragment .mt1}
- Or you can embed the resources into the HTML file itself
  - This will make `x.html` larger but it will be "self-contained"
  - To do so, adjust the YAML header in `x.qmd` to include the following:
  
```yaml
format:
  html:
    embed-resources: true
```
:::


## HTML Theming

You can change the theme of your document via YAML header

There are currently 25 different [HTML themes](https://quarto.org/docs/output-formats/html-themes.html) to choose from

::: {.fragment .mt1}
```yaml
format:
  html:
    theme: darkly
```

![](https://quarto.org/docs/output-formats/images/html-dark.png){.absolute width="800"}
:::

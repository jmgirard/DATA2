---
format: 
  revealjs:
    css: ../../styles.css
    slide-number: true
    show-slide-number: all
    progress: true
    history: true
    hash-type: number
    theme: default
    code-block-background: true
    highlight-style: zenburn
    code-link: false
    code-copy: true
    pagetitle: "Foundations of Data Science"
    author-meta: "Jeffrey Girard"
    date-meta: "2023-02-22"
    semester: "Spring 2023"
    course: "399/800"
    lecture: "06b"
---

::: {.my-title}
# [Foundations of]{.my-subtitle}<br />[Data Science]{.blue}

::: {.my-grey}
[{{< meta semester >}} | Course {{< meta course >}}]{}<br />
[Jeffrey M. Girard | Lecture {{< meta lecture >}}]{}
:::

![](../../img/proud_coder_357EDD.svg){.absolute bottom=0 right=0 width=400}
:::

## Roadmap

::: {.columns .pv4}

::: {.column width="60%"}
1. Scales
  
2. Labels

3. Themes

4. Activity
:::

::: {.column .tc .pv4 width="40%"}
{{< li xtkehzkm trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::

:::


# Scales

## Scales {.smaller}

::: {.columns .pv4}

::: {.column width="60%"}
- Scales are one of the basic gg elements

::: {.mt1}
- So far, we have let R guess on the scales
  - Type (e.g., continuous or discrete)
  - Limits (minimum and maximum values)
  - Breaks (values to emphasize)
:::

::: {.fragment .mt1}
- But we can completely [customize the scales]{.b .blue}!
  - Changes may [enhance communication]{.b .green}
  - We will add on various `scale_` functions
:::
:::

::: {.column .tc .pv4 width="40%"}
{{< li kjeivigm trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::

:::


## Scales Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# Creating a base plot (map drv to color for all geoms)
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
  geom_jitter(size = 2) + 
  geom_smooth()

# Creating a base plot (map drv to color for jitter geom only)
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_jitter(size = 2, aes(color = drv)) + 
  geom_smooth(color = "black")

# Configuring the limits and breaks of the continuous y axis
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_jitter(size = 2, aes(color = drv)) + 
  geom_smooth(color = "black") +
  scale_y_continuous(
    limits = c(5, 50),
    breaks = c(10, 20, 30, 40),
    expand = c(0, 0)
  )

# Configuring the limits and breaks of the continuous x axis
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_jitter(size = 2, aes(color = drv)) + 
  geom_smooth(color = "black") +
  scale_y_continuous(
    limits = c(5, 50), 
    breaks = c(10, 20, 30, 40),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(1, 7.5),
    breaks = c(2, 3, 4, 5, 6, 7),
    expand = c(0, 0)
  )

# Configuring the breaks and labels of the discrete color scale
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_jitter(size = 2, aes(color = drv)) + 
  geom_smooth(color = "black") +
  scale_y_continuous(
    limits = c(5, 50), 
    breaks = c(10, 20, 30, 40),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(1, 7.5),
    breaks = c(2, 3, 4, 5, 6, 7),
    expand = c(0, 0)
  ) +
  scale_color_discrete(
    breaks = c("r", "f", "4"), # change ordering
    labels = c(
      "4" = "Four-Wheel",
      "f" = "Front-Wheel",
      "r" = "Rear-Wheel"
    )
  )

# Manually specifying the color values
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_jitter(aes(color = drv)) + 
  geom_smooth(color = "black") +
  scale_y_continuous(
    limits = c(5, 50), 
    breaks = c(10, 20, 30, 40),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(1, 7.5),
    breaks = c(2, 3, 4, 5, 6, 7),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    breaks = c("r", "f", "4"),
    labels = c(
      "4" = "Four-Wheel",
      "f" = "Front-Wheel",
      "r" = "Rear-Wheel"
    ),
    values = c(
      "4" = "salmon",
      "f" = "cornflowerblue",
      "r" = "seagreen3"
    )
  )

# Add a redundant shape mapping
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_jitter(size = 2, aes(color = drv, shape = drv)) + 
  geom_smooth(color = "black") +
  scale_y_continuous(
    limits = c(5, 50), 
    breaks = c(10, 20, 30, 40),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    limits = c(1, 7.5),
    breaks = c(2, 3, 4, 5, 6, 7),
    expand = c(0, 0)
  ) +
  scale_color_manual(
    breaks = c("r", "f", "4"),
    labels = c(
      "4" = "Four-Wheel",
      "f" = "Front-Wheel",
      "r" = "Rear-Wheel"
    ),
    values = c(
      "4" = "salmon",
      "f" = "cornflowerblue",
      "r" = "seagreen3"
    )
  ) +
  scale_shape_discrete(
    breaks = c("r", "f", "4"),
    labels = c(
      "4" = "Four-Wheel",
      "f" = "Front-Wheel",
      "r" = "Rear-Wheel"
    )
  )
```


# Labels

## Labels {.smaller}

::: {.columns .pv4}

::: {.column width="60%"}
- By default, scales are named after data variables

::: {.mt1}
- Changing names may [enhance communication]{.b .blue}
  - Provide accessible names/definitions
  - Include units and other methods info.
  - Appear prettier and more professional
:::

::: {.fragment .mt1}
- We can also add [plot-level information]{.b .blue}
  - Titles and subtitles for take-aways
  - Captions for asides or data sources
:::

::: {.fragment .mt1}
- This is all done by adding on `labs()`
:::
:::

::: {.column .tc .pv4 width="40%"}
{{< li aravllcl trigger=loop delay=5000 colors=primary:#2a76dd class=rc >}}
:::

:::

## Labels Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# Save plot from last section as an object (not necessary, but saves space)
p <- 
  ggplot(mpg, aes(x = displ, y = hwy)) +
    geom_jitter(size = 2, aes(color = drv, shape = drv)) + 
    geom_smooth(color = "black") +
    scale_y_continuous(
      limits = c(5, 50), 
      breaks = c(10, 20, 30, 40),
      expand = c(0, 0)
    ) +
    scale_x_continuous(
      limits = c(1, 7.5),
      breaks = c(2, 3, 4, 5, 6, 7),
      expand = c(0, 0)
    ) +
    scale_color_manual(
      breaks = c("r", "f", "4"),
      labels = c(
        "4" = "Four-Wheel",
        "f" = "Front-Wheel",
        "r" = "Rear-Wheel"
      ),
      values = c(
        "4" = "salmon",
        "f" = "cornflowerblue",
        "r" = "seagreen3"
      )
    ) +
    scale_shape_discrete(
      breaks = c("r", "f", "4"),
      labels = c(
        "4" = "Four-Wheel",
        "f" = "Front-Wheel",
        "r" = "Rear-Wheel"
      )
    )
p

# Adjusting the positional (x and y) axis titles
p +
  labs(
    x = "Engine displacement (L)",
    y = "Highway fuel economy (mpg)"
  )

# Adjusting the color and shape legend titles
p +
  labs(
    x = "Engine displacement (L)",
    y = "Highway fuel economy (mpg)",
    color = "Drivetrain",
    shape = "Drivetrain"
  )


# Adding a title
p +
  labs(
    x = "Engine displacement (L)",
    y = "Highway fuel economy (mpg)",
    color = "Drivetrain",
    shape = "Drivetrain",
    title = "Fuel efficiency generally decreases with engine size"
  )

# Adding a subtitle
p + 
  labs(
    x = "Engine displacement (L)",
    y = "Highway fuel economy (mpg)",
    color = "Drivetrain",
    shape = "Drivetrain",
    title = "Fuel efficiency generally decreases with engine size",
    subtitle = "Rear-wheel drive vehicles are often an exception due to sports cars' light weight"
  )

# Adding a caption
p +
  labs(
    x = "Engine displacement (L)",
    y = "Highway fuel economy (mpg)",
    color = "Drivetrain",
    shape = "Drivetrain",
    title = "Fuel efficiency generally decreases with engine size",
    subtitle = "Rear-wheel drive vehicles are often an exception due to sports cars' light weight",
    caption = "Data from fueleconomy.gov"
  )
```


# Themes

## Themes {.smaller}
::: {.columns .pv4}

::: {.column width="60%"}
- Themes let you control [non-data elements]{.b .blue}
  - Font size and color
  - Ticks and gridlines
  - Legend position

::: {.fragment .mt1}
- Complete themes change many elements
  - `theme_*()`
:::

::: {.fragment .mt1}
- Individual elements can also be changed
  - `theme(...)`
  - `element_*()`
:::
:::

::: {.column .tc .pv4 width="40%"}
{{< li hbkyydsg trigger=loop delay=5000 colors=secondary:#2a76dd class=rc >}}
:::

:::


## Themes Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# Save plot from last section as an object (not necessary, but saves space)
p <- 
  ggplot(mpg, aes(x = displ, y = hwy)) +
    geom_jitter(size = 2, aes(color = drv, shape = drv)) + 
    geom_smooth(color = "black") +
    scale_y_continuous(
      limits = c(5, 50), 
      breaks = c(10, 20, 30, 40),
      expand = c(0, 0)
    ) +
    scale_x_continuous(
      limits = c(1, 7.5),
      breaks = c(2, 3, 4, 5, 6, 7),
      expand = c(0, 0)
    ) +
    scale_color_manual(
      breaks = c("r", "f", "4"),
      labels = c(
        "4" = "Four-Wheel",
        "f" = "Front-Wheel",
        "r" = "Rear-Wheel"
      ),
      values = c(
        "4" = "salmon",
        "f" = "cornflowerblue",
        "r" = "seagreen3"
      )
    ) +
    scale_shape_discrete(
      breaks = c("r", "f", "4"),
      labels = c(
        "4" = "Four-Wheel",
        "f" = "Front-Wheel",
        "r" = "Rear-Wheel"
      )
    ) +
  labs(
    x = "Engine displacement (L)",
    y = "Highway fuel economy (mpg)",
    color = "Drivetrain",
    shape = "Drivetrain",
    title = "Fuel efficiency generally decreases with engine size",
    subtitle = "Rear-wheel drive vehicles are often an exception due to sports cars' light weight",
    caption = "Data from fueleconomy.gov"
  )
p

# Add complete themes to change many elements at once
p + theme_classic()

p + theme_bw()

p + theme_minimal()

p + theme_dark()

# Modify the "base size" for labels in the plot

p + theme_minimal(base_size = 20) # too big
p + theme_minimal(base_size = 5) # too small
p + theme_minimal(base_size = 12) # just right

# Customize specific elements one-by-one

## Customize the legend position
p + theme(legend.position = "bottom")
p + theme(legend.position = "none")
p + theme(legend.position = c(0.9, 0.8))

## Customize text elements
p + 
  theme(
    legend.position = c(0.9, 0.8),
    axis.title = element_text(color = "grey50"),
    legend.title = element_text(color = "grey50"),
    plot.title = element_text(face = "bold")
  )

## Customize line elements
p + 
  theme(
    legend.position = c(0.9, 0.8),
    axis.title = element_text(color = "grey50"),
    legend.title = element_text(color = "grey50"),
    plot.title = element_text(face = "bold"),
    panel.grid.major = element_line(linewidth = 2/3, linetype = "dashed"),
    axis.ticks = element_line(linewidth = 2/3)
  )

## Removing (or "blanking") elements
p + 
  theme(
    legend.position = c(0.9, 0.8),
    axis.title = element_text(color = "grey50"),
    legend.title = element_text(color = "grey50"),
    plot.title = element_text(face = "bold"),
    panel.grid.major = element_line(linewidth = 2/3, linetype = "dashed"),
    axis.ticks = element_line(linewidth = 2/3),
    panel.grid.minor = element_blank()
  )

## Customizing rectangle elements
p + 
  theme(
    legend.position = c(0.9, 0.8),
    axis.title = element_text(color = "grey50"),
    legend.title = element_text(color = "grey50"),
    plot.title = element_text(face = "bold"),
    panel.grid.major = element_line(linewidth = 2/3, linetype = "dashed"),
    axis.ticks = element_line(linewidth = 2/3),
    panel.grid.minor = element_blank(),
    panel.background = element_rect(fill = "antiquewhite")
  )

# Applying the same theme to many plots

mytheme <- 
  theme(
    legend.position = c(0.9, 0.8),
    axis.title = element_text(color = "grey50"),
    legend.title = element_text(color = "grey50"),
    plot.title = element_text(face = "bold"),
    panel.grid.major = element_line(linewidth = 2/3, linetype = "dashed"),
    axis.ticks = element_line(linewidth = 2/3),
    panel.grid.minor = element_blank(),
    panel.background = element_rect(fill = "antiquewhite")
  )

p + mytheme

```
